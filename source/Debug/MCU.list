
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091bc  080091bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c4  080091c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080091cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  2000000c  080091d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  080091d8  00020880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9c3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3c  00000000  00000000  0003e9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  00042540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00043f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfb3  00000000  00000000  00045778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200d0  00000000  00000000  0007172b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010992f  00000000  00000000  000917fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019b12a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e90  00000000  00000000  0019b17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009148 	.word	0x08009148

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08009148 	.word	0x08009148

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09a      	sub	sp, #104	; 0x68
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fefa 	bl	80012ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f82b 	bl	8000530 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004da:	f000 f87b 	bl	80005d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fae9 	bl	8000ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 fac9 	bl	8000a78 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e6:	f000 f94f 	bl	8000788 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ea:	f000 f98d 	bl	8000808 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80004ee:	f000 f9f7 	bl	80008e0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80004f2:	f000 fa17 	bl	8000924 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004f6:	f000 fa53 	bl	80009a0 <MX_SPI2_Init>
  MX_FATFS_Init();
 80004fa:	f008 fbff 	bl	8008cfc <MX_FATFS_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004fe:	f000 fa8d 	bl	8000a1c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000502:	f000 f899 	bl	8000638 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000506:	f000 f9bf 	bl	8000888 <MX_LPUART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char telemetry_msg[100];
  HAL_ADC_Start_DMA(&hadc1, pyro_adc, 4);
 800050a:	2204      	movs	r2, #4
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <main+0x5c>)
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x60>)
 8000510:	f001 fac0 	bl	8001a94 <HAL_ADC_Start_DMA>
  while (1) {
	  HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 ff4c 	bl	80013b4 <HAL_Delay>
  	  HAL_ADC_Start_DMA(&hadc1, pyro_adc, 4);
 800051c:	2204      	movs	r2, #4
 800051e:	4902      	ldr	r1, [pc, #8]	; (8000528 <main+0x5c>)
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <main+0x60>)
 8000522:	f001 fab7 	bl	8001a94 <HAL_ADC_Start_DMA>
	  HAL_Delay(1000);
 8000526:	e7f5      	b.n	8000514 <main+0x48>
 8000528:	20000858 	.word	0x20000858
 800052c:	20000028 	.word	0x20000028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 fdfa 	bl	8009138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f003 faf9 	bl	8003b4c <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 fb64 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000564:	2310      	movs	r3, #16
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000570:	23a0      	movs	r3, #160	; 0xa0
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000578:	2301      	movs	r3, #1
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800057c:	2302      	movs	r3, #2
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000580:	230a      	movs	r3, #10
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fb3f 	bl	8003c18 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005a0:	f000 fb44 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	2104      	movs	r1, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 ff07 	bl	80043d0 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c8:	f000 fb30 	bl	8000c2c <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3758      	adds	r7, #88	; 0x58
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0a2      	sub	sp, #136	; 0x88
 80005d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2288      	movs	r2, #136	; 0x88
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f008 fda9 	bl	8009138 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
 80005e6:	f44f 2306 	mov.w	r3, #548864	; 0x86000
 80005ea:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005f0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80005f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005fc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000606:	230c      	movs	r3, #12
 8000608:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800060a:	2307      	movs	r3, #7
 800060c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000616:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800061a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f8fa 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800062a:	f000 faff 	bl	8000c2c <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3788      	adds	r7, #136	; 0x88
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800065a:	4b45      	ldr	r3, [pc, #276]	; (8000770 <MX_ADC1_Init+0x138>)
 800065c:	4a45      	ldr	r2, [pc, #276]	; (8000774 <MX_ADC1_Init+0x13c>)
 800065e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <MX_ADC1_Init+0x138>)
 8000662:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000666:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <MX_ADC1_Init+0x138>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b40      	ldr	r3, [pc, #256]	; (8000770 <MX_ADC1_Init+0x138>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000674:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <MX_ADC1_Init+0x138>)
 8000676:	2201      	movs	r2, #1
 8000678:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <MX_ADC1_Init+0x138>)
 800067c:	2204      	movs	r2, #4
 800067e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MX_ADC1_Init+0x138>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000686:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <MX_ADC1_Init+0x138>)
 8000688:	2201      	movs	r2, #1
 800068a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800068c:	4b38      	ldr	r3, [pc, #224]	; (8000770 <MX_ADC1_Init+0x138>)
 800068e:	2204      	movs	r2, #4
 8000690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <MX_ADC1_Init+0x138>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <MX_ADC1_Init+0x138>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a0:	4b33      	ldr	r3, [pc, #204]	; (8000770 <MX_ADC1_Init+0x138>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <MX_ADC1_Init+0x138>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <MX_ADC1_Init+0x138>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006b4:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <MX_ADC1_Init+0x138>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006bc:	482c      	ldr	r0, [pc, #176]	; (8000770 <MX_ADC1_Init+0x138>)
 80006be:	f001 f893 	bl	80017e8 <HAL_ADC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006c8:	f000 fab0 	bl	8000c2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4826      	ldr	r0, [pc, #152]	; (8000770 <MX_ADC1_Init+0x138>)
 80006d8:	f002 fa28 	bl	8002b2c <HAL_ADCEx_MultiModeConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006e2:	f000 faa3 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_ADC1_Init+0x140>)
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ea:	2306      	movs	r3, #6
 80006ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80006ee:	2305      	movs	r3, #5
 80006f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f2:	237f      	movs	r3, #127	; 0x7f
 80006f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f6:	2304      	movs	r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	481b      	ldr	r0, [pc, #108]	; (8000770 <MX_ADC1_Init+0x138>)
 8000704:	f001 fcb0 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800070e:	f000 fa8d 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ADC1_Init+0x144>)
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000716:	230c      	movs	r3, #12
 8000718:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <MX_ADC1_Init+0x138>)
 8000720:	f001 fca2 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800072a:	f000 fa7f 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC1_Init+0x148>)
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000732:	2312      	movs	r3, #18
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_ADC1_Init+0x138>)
 800073c:	f001 fc94 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000746:	f000 fa71 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ADC1_Init+0x14c>)
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800074e:	2318      	movs	r3, #24
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC1_Init+0x138>)
 8000758:	f001 fc86 	bl	8002068 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8000762:	f000 fa63 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000028 	.word	0x20000028
 8000774:	50040000 	.word	0x50040000
 8000778:	14f00020 	.word	0x14f00020
 800077c:	19200040 	.word	0x19200040
 8000780:	1d500080 	.word	0x1d500080
 8000784:	21800100 	.word	0x21800100

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C1_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C1_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 148;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C1_Init+0x74>)
 800079a:	2294      	movs	r2, #148	; 0x94
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_I2C1_Init+0x74>)
 80007c4:	f002 ff46 	bl	8003654 <HAL_I2C_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 fa2d 	bl	8000c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_I2C1_Init+0x74>)
 80007d6:	f002 ffcc 	bl	8003772 <HAL_I2CEx_ConfigAnalogFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 fa24 	bl	8000c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2C1_Init+0x74>)
 80007e8:	f003 f80e 	bl	8003808 <HAL_I2CEx_ConfigDigitalFilter>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 fa1b 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000d4 	.word	0x200000d4
 8000800:	40005400 	.word	0x40005400
 8000804:	00702991 	.word	0x00702991

08000808 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_I2C2_Init+0x74>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <MX_I2C2_Init+0x78>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_I2C2_Init+0x74>)
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <MX_I2C2_Init+0x7c>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_I2C2_Init+0x74>)
 8000820:	2201      	movs	r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_I2C2_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <MX_I2C2_Init+0x74>)
 8000844:	f002 ff06 	bl	8003654 <HAL_I2C_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800084e:	f000 f9ed 	bl	8000c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_I2C2_Init+0x74>)
 8000856:	f002 ff8c 	bl	8003772 <HAL_I2CEx_ConfigAnalogFilter>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 f9e4 	bl	8000c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_I2C2_Init+0x74>)
 8000868:	f002 ffce 	bl	8003808 <HAL_I2CEx_ConfigDigitalFilter>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 f9db 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000128 	.word	0x20000128
 8000880:	40005800 	.word	0x40005800
 8000884:	10909cec 	.word	0x10909cec

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_LPUART1_UART_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 8000894:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000898:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c6:	f006 fd2e 	bl	8007326 <HAL_HalfDuplex_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f9ac 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000017c 	.word	0x2000017c
 80008dc:	40008000 	.word	0x40008000

080008e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <MX_SDMMC1_SD_Init+0x40>)
 80008e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 80008fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000902:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <MX_SDMMC1_SD_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000200 	.word	0x20000200
 8000920:	40012800 	.word	0x40012800

08000924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_SPI1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_SPI1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_SPI1_Init+0x74>)
 8000930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_SPI1_Init+0x74>)
 800093e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000942:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_SPI1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_SPI1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_SPI1_Init+0x74>)
 8000952:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000956:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_SPI1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_SPI1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_SPI1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI1_Init+0x74>)
 8000972:	2207      	movs	r2, #7
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_SPI1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI1_Init+0x74>)
 800097e:	2208      	movs	r2, #8
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_SPI1_Init+0x74>)
 8000984:	f006 fc2c 	bl	80071e0 <HAL_SPI_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 f94d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000284 	.word	0x20000284
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <MX_SPI2_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009ee:	2207      	movs	r2, #7
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI2_Init+0x74>)
 80009fa:	2208      	movs	r2, #8
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_SPI2_Init+0x74>)
 8000a00:	f006 fbee 	bl	80071e0 <HAL_SPI_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a0a:	f000 f90f 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200002e8 	.word	0x200002e8
 8000a18:	40003800 	.word	0x40003800

08000a1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	f002 ff1e 	bl	80038a0 <HAL_PCD_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f8df 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000034c 	.word	0x2000034c

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6493      	str	r3, [r2, #72]	; 0x48
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200b      	movs	r0, #11
 8000a9c:	f002 f9d1 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f002 f9ea 	bl	8002e7a <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a3a      	ldr	r2, [pc, #232]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_GPIO_Init+0x134>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|PYRO1_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2130      	movs	r1, #48	; 0x30
 8000b46:	4829      	ldr	r0, [pc, #164]	; (8000bec <MX_GPIO_Init+0x138>)
 8000b48:	f002 fd6c 	bl	8003624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2107      	movs	r1, #7
 8000b50:	4827      	ldr	r0, [pc, #156]	; (8000bf0 <MX_GPIO_Init+0x13c>)
 8000b52:	f002 fd67 	bl	8003624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b56:	2310      	movs	r3, #16
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <MX_GPIO_Init+0x138>)
 8000b6e:	f002 fb97 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8000b72:	2320      	movs	r3, #32
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_GPIO_Init+0x138>)
 8000b8a:	f002 fb89 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <MX_GPIO_Init+0x13c>)
 8000ba6:	f002 fb7b 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_DET_Pin */
  GPIO_InitStruct.Pin = SDMMC1_DET_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_DET_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x138>)
 8000bbe:	f002 fb6f 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_DIO0_Pin RF_DIO1_Pin RF_DIO5_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin|RF_DIO1_Pin|RF_DIO5_Pin;
 8000bc2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f002 fb61 	bl	80032a0 <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000800 	.word	0x48000800
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start_DMA(&hadc1, pyro_adc, 4);
 8000c10:	2204      	movs	r2, #4
 8000c12:	4904      	ldr	r1, [pc, #16]	; (8000c24 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c16:	f000 ff3d 	bl	8001a94 <HAL_ADC_Start_DMA>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000858 	.word	0x20000858
 8000c28:	20000028 	.word	0x20000028

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <HAL_ADC_MspInit+0xdc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d158      	bne.n	8000d54 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_ADC_MspInit+0xe0>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <HAL_ADC_MspInit+0xe0>)
 8000ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <HAL_ADC_MspInit+0xe0>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_ADC_MspInit+0xe0>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_ADC_MspInit+0xe0>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <HAL_ADC_MspInit+0xe0>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = PYRO1_DET_Pin|PYRO2_DET_Pin|PYRO3_DET_Pin|PYRO4_DET_Pin;
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f002 fada 	bl	80032a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000cee:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <HAL_ADC_MspInit+0xe8>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d2a:	f002 f8c1 	bl	8002eb0 <HAL_DMA_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_ADC_MspInit+0xb8>
    {
      Error_Handler();
 8000d34:	f7ff ff7a 	bl	8000c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <HAL_ADC_MspInit+0xe4>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2012      	movs	r0, #18
 8000d4a:	f002 f87a 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d4e:	2012      	movs	r0, #18
 8000d50:	f002 f893 	bl	8002e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	50040000 	.word	0x50040000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	40020008 	.word	0x40020008

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0ae      	sub	sp, #184	; 0xb8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2288      	movs	r2, #136	; 0x88
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f008 f9d3 	bl	8009138 <memset>
  if(hi2c->Instance==I2C1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <HAL_I2C_MspInit+0x134>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d13b      	bne.n	8000e14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fd35 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000db4:	f7ff ff3a 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a39      	ldr	r2, [pc, #228]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd0:	23c0      	movs	r3, #192	; 0xc0
 8000dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df2:	4619      	mov	r1, r3
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <HAL_I2C_MspInit+0x13c>)
 8000df6:	f002 fa53 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e12:	e040      	b.n	8000e96 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <HAL_I2C_MspInit+0x140>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d13b      	bne.n	8000e96 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fcf4 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000e36:	f7ff fef9 	bl	8000c2c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5a:	2312      	movs	r3, #18
 8000e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <HAL_I2C_MspInit+0x13c>)
 8000e7a:	f002 fa11 	bl	80032a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
}
 8000e96:	bf00      	nop
 8000e98:	37b8      	adds	r7, #184	; 0xb8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	40005800 	.word	0x40005800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ac      	sub	sp, #176	; 0xb0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2288      	movs	r2, #136	; 0x88
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f008 f931 	bl	8009138 <memset>
  if(huart->Instance==LPUART1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <HAL_UART_MspInit+0xb0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13a      	bne.n	8000f56 <HAL_UART_MspInit+0xa6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fc93 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef8:	f7ff fe98 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f44:	2308      	movs	r3, #8
 8000f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f52:	f002 f9a5 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	37b0      	adds	r7, #176	; 0xb0
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40008000 	.word	0x40008000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000800 	.word	0x48000800

08000f6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <HAL_SD_MspInit+0xb4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d144      	bne.n	8001018 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_SD_MspInit+0xb8>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fd6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fda:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <HAL_SD_MspInit+0xbc>)
 8000ff4:	f002 f954 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001008:	230c      	movs	r3, #12
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <HAL_SD_MspInit+0xc0>)
 8001014:	f002 f944 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40012800 	.word	0x40012800
 8001024:	40021000 	.word	0x40021000
 8001028:	48000800 	.word	0x48000800
 800102c:	48000c00 	.word	0x48000c00

08001030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a2f      	ldr	r2, [pc, #188]	; (800110c <HAL_SPI_MspInit+0xdc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d129      	bne.n	80010a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105c:	6613      	str	r3, [r2, #96]	; 0x60
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a28      	ldr	r2, [pc, #160]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001082:	23f0      	movs	r3, #240	; 0xf0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001092:	2305      	movs	r3, #5
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f002 f8fe 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010a4:	e02d      	b.n	8001102 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <HAL_SPI_MspInit+0xe4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d128      	bne.n	8001102 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	4a16      	ldr	r2, [pc, #88]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6593      	str	r3, [r2, #88]	; 0x58
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_SPI_MspInit+0xe0>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f2:	2305      	movs	r3, #5
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_SPI_MspInit+0xe8>)
 80010fe:	f002 f8cf 	bl	80032a0 <HAL_GPIO_Init>
}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013000 	.word	0x40013000
 8001110:	40021000 	.word	0x40021000
 8001114:	40003800 	.word	0x40003800
 8001118:	48000400 	.word	0x48000400

0800111c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800113c:	d146      	bne.n	80011cc <HAL_PCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|USB_OTG_FS_DP_Pin;
 8001156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001168:	230a      	movs	r3, #10
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f002 f893 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d114      	bne.n	80011c8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6593      	str	r3, [r2, #88]	; 0x58
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80011b6:	f002 fd1f 	bl	8003bf8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_PCD_MspInit+0xb8>)
 80011c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011c6:	e001      	b.n	80011cc <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 80011c8:	f002 fd16 	bl	8003bf8 <HAL_PWREx_EnableVddUSB>
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f8a6 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <DMA1_Channel1_IRQHandler+0x10>)
 8001232:	f001 ff55 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000008c 	.word	0x2000008c

08001240 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <ADC1_2_IRQHandler+0x10>)
 8001246:	f000 fce1 	bl	8001c0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000028 	.word	0x20000028

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff ffea 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f007 ff23 	bl	80090f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012aa:	f7ff f90f 	bl	80004cc <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012bc:	080091cc 	.word	0x080091cc
  ldr r2, =_sbss
 80012c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c4:	20000880 	.word	0x20000880

080012c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC3_IRQHandler>

080012ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f001 fda9 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 f80e 	bl	80012fc <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	e001      	b.n	80012f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ec:	f7ff fca4 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_InitTick+0x6c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d023      	beq.n	8001358 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_InitTick+0x70>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_InitTick+0x6c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fdb5 	bl	8002e96 <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10f      	bne.n	8001352 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d809      	bhi.n	800134c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f001 fd7f 	bl	8002e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_InitTick+0x74>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e007      	b.n	800135c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e004      	b.n	800135c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e001      	b.n	800135c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20000868 	.word	0x20000868

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000868 	.word	0x20000868

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008

080013fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3360      	adds	r3, #96	; 0x60
 8001476:	461a      	mov	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <LL_ADC_SetOffset+0x44>)
 8001486:	4013      	ands	r3, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	4313      	orrs	r3, r2
 8001494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	03fff000 	.word	0x03fff000

080014ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3360      	adds	r3, #96	; 0x60
 80014ba:	461a      	mov	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3360      	adds	r3, #96	; 0x60
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3330      	adds	r3, #48	; 0x30
 8001544:	461a      	mov	r2, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	211f      	movs	r1, #31
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0e9b      	lsrs	r3, r3, #26
 800156c:	f003 011f 	and.w	r1, r3, #31
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3314      	adds	r3, #20
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0e5b      	lsrs	r3, r3, #25
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	0d1b      	lsrs	r3, r3, #20
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2107      	movs	r1, #7
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	0d1b      	lsrs	r3, r3, #20
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0318 	and.w	r3, r3, #24
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <LL_ADC_SetChannelSingleDiff+0x44>)
 800162c:	40d9      	lsrs	r1, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	400b      	ands	r3, r1
 8001632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	0007ffff 	.word	0x0007ffff

08001650 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 031f 	and.w	r3, r3, #31
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001698:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6093      	str	r3, [r2, #8]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016c0:	d101      	bne.n	80016c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001710:	d101      	bne.n	8001716 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <LL_ADC_IsEnabled+0x18>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <LL_ADC_IsEnabled+0x1a>
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001782:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001786:	f043 0204 	orr.w	r2, r3, #4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d101      	bne.n	80017b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e136      	b.n	8001a70 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fa35 	bl	8000c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff3f 	bl	80016ac <LL_ADC_IsDeepPowerDownEnabled>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff25 	bl	8001688 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff5a 	bl	80016fc <LL_ADC_IsInternalRegulatorEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff3e 	bl	80016d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001858:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_ADC_Init+0x290>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	4a87      	ldr	r2, [pc, #540]	; (8001a7c <HAL_ADC_Init+0x294>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800186c:	e002      	b.n	8001874 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff3c 	bl	80016fc <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f043 0210 	orr.w	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff75 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 80018b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80cf 	bne.w	8001a5e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80cb 	bne.w	8001a5e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff35 	bl	800174c <LL_ADC_IsEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d115      	bne.n	8001914 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018e8:	4865      	ldr	r0, [pc, #404]	; (8001a80 <HAL_ADC_Init+0x298>)
 80018ea:	f7ff ff2f 	bl	800174c <LL_ADC_IsEnabled>
 80018ee:	4604      	mov	r4, r0
 80018f0:	4864      	ldr	r0, [pc, #400]	; (8001a84 <HAL_ADC_Init+0x29c>)
 80018f2:	f7ff ff2b 	bl	800174c <LL_ADC_IsEnabled>
 80018f6:	4603      	mov	r3, r0
 80018f8:	431c      	orrs	r4, r3
 80018fa:	4863      	ldr	r0, [pc, #396]	; (8001a88 <HAL_ADC_Init+0x2a0>)
 80018fc:	f7ff ff26 	bl	800174c <LL_ADC_IsEnabled>
 8001900:	4603      	mov	r3, r0
 8001902:	4323      	orrs	r3, r4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4619      	mov	r1, r3
 800190e:	485f      	ldr	r0, [pc, #380]	; (8001a8c <HAL_ADC_Init+0x2a4>)
 8001910:	f7ff fd74 	bl	80013fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e5b      	ldrb	r3, [r3, #25]
 8001918:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800191e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001924:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800192a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001932:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d106      	bne.n	8001950 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	3b01      	subs	r3, #1
 8001948:	045b      	lsls	r3, r3, #17
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_ADC_Init+0x2a8>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	430b      	orrs	r3, r1
 800197e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff08 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 800198a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff15 	bl	80017c0 <LL_ADC_INJ_IsConversionOngoing>
 8001996:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d13d      	bne.n	8001a1a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d13a      	bne.n	8001a1a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c0:	f023 0302 	bic.w	r3, r3, #2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	69b9      	ldr	r1, [r7, #24]
 80019ca:	430b      	orrs	r3, r1
 80019cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d118      	bne.n	8001a0a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019fa:	430a      	orrs	r2, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	e007      	b.n	8001a1a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10c      	bne.n	8001a3c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f023 010f 	bic.w	r1, r3, #15
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3a:	e007      	b.n	8001a4c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020f 	bic.w	r2, r2, #15
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	f023 0303 	bic.w	r3, r3, #3
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a5c:	e007      	b.n	8001a6e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	f043 0210 	orr.w	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3724      	adds	r7, #36	; 0x24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	053e2d63 	.word	0x053e2d63
 8001a80:	50040000 	.word	0x50040000
 8001a84:	50040100 	.word	0x50040100
 8001a88:	50040200 	.word	0x50040200
 8001a8c:	50040300 	.word	0x50040300
 8001a90:	fff0c007 	.word	0xfff0c007

08001a94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa0:	4853      	ldr	r0, [pc, #332]	; (8001bf0 <HAL_ADC_Start_DMA+0x15c>)
 8001aa2:	f7ff fdd5 	bl	8001650 <LL_ADC_GetMultimode>
 8001aa6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe74 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 8093 	bne.w	8001be0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0x34>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e08e      	b.n	8001be6 <HAL_ADC_Start_DMA+0x152>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <HAL_ADC_Start_DMA+0x160>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d008      	beq.n	8001aec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d002      	beq.n	8001aec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d172      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 feab 	bl	8002848 <ADC_Enable>
 8001af2:	4603      	mov	r3, r0
 8001af4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d165      	bne.n	8001bc8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <HAL_ADC_Start_DMA+0x164>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d002      	beq.n	8001b20 <HAL_ADC_Start_DMA+0x8c>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_Start_DMA+0x8e>
 8001b20:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_ADC_Start_DMA+0x168>)
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d002      	beq.n	8001b30 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	f023 0206 	bic.w	r2, r3, #6
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
 8001b54:	e002      	b.n	8001b5c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_ADC_Start_DMA+0x16c>)
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_ADC_Start_DMA+0x170>)
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_ADC_Start_DMA+0x174>)
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	221c      	movs	r2, #28
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0210 	orr.w	r2, r2, #16
 8001b92:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3340      	adds	r3, #64	; 0x40
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f001 fa34 	bl	8003020 <HAL_DMA_Start_IT>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fdd6 	bl	8001772 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bc6:	e00d      	b.n	8001be4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001bd0:	e008      	b.n	8001be4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bde:	e001      	b.n	8001be4 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	50040300 	.word	0x50040300
 8001bf4:	50040200 	.word	0x50040200
 8001bf8:	50040100 	.word	0x50040100
 8001bfc:	50040000 	.word	0x50040000
 8001c00:	08002955 	.word	0x08002955
 8001c04:	08002a2d 	.word	0x08002a2d
 8001c08:	08002a49 	.word	0x08002a49

08001c0c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c28:	4882      	ldr	r0, [pc, #520]	; (8001e34 <HAL_ADC_IRQHandler+0x228>)
 8001c2a:	f7ff fd11 	bl	8001650 <LL_ADC_GetMultimode>
 8001c2e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d017      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x5e>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 ff5b 	bl	8002b18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x72>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8083 	beq.w	8001d90 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d07d      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc2c 	bl	800150e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d062      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5d      	ldr	r2, [pc, #372]	; (8001e38 <HAL_ADC_IRQHandler+0x22c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d002      	beq.n	8001ccc <HAL_ADC_IRQHandler+0xc0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e000      	b.n	8001cce <HAL_ADC_IRQHandler+0xc2>
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <HAL_ADC_IRQHandler+0x230>)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d008      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d104      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	e00c      	b.n	8001d0c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_ADC_IRQHandler+0x22c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d002      	beq.n	8001d02 <HAL_ADC_IRQHandler+0xf6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e000      	b.n	8001d04 <HAL_ADC_IRQHandler+0xf8>
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_ADC_IRQHandler+0x230>)
 8001d04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d135      	bne.n	8001d82 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d12e      	bne.n	8001d82 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fd36 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d11a      	bne.n	8001d6a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 020c 	bic.w	r2, r2, #12
 8001d42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d112      	bne.n	8001d82 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
 8001d68:	e00b      	b.n	8001d82 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe ff40 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x198>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 809f 	beq.w	8001eee <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8099 	beq.w	8001eee <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fbd7 	bl	800158c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dde:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fb92 	bl	800150e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_ADC_IRQHandler+0x22c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d002      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x1f0>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_IRQHandler+0x1f2>
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_ADC_IRQHandler+0x230>)
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d008      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d002      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d104      	bne.n	8001e22 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	e013      	b.n	8001e4a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_ADC_IRQHandler+0x22c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d009      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x234>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_ADC_IRQHandler+0x236>
 8001e32:	bf00      	nop
 8001e34:	50040300 	.word	0x50040300
 8001e38:	50040100 	.word	0x50040100
 8001e3c:	50040000 	.word	0x50040000
 8001e40:	4b7d      	ldr	r3, [pc, #500]	; (8002038 <HAL_ADC_IRQHandler+0x42c>)
 8001e42:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d047      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_ADC_IRQHandler+0x25e>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d03f      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d13a      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d133      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12e      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fc9a 	bl	80017c0 <LL_ADC_INJ_IsConversionOngoing>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11a      	bne.n	8001ec8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ea0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d112      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec6:	e00b      	b.n	8001ee0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fdf1 	bl	8002ac8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2260      	movs	r2, #96	; 0x60
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d011      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x310>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f896 	bl	8002040 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d012      	beq.n	8001f4c <HAL_ADC_IRQHandler+0x340>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fdd7 	bl	8002af0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x370>
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00d      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fdc9 	bl	8002b04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x3e8>
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d031      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9c:	e014      	b.n	8001fc8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fa4:	4825      	ldr	r0, [pc, #148]	; (800203c <HAL_ADC_IRQHandler+0x430>)
 8001fa6:	f7ff fb61 	bl	800166c <LL_ADC_GetMultiDMATransfer>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	e008      	b.n	8001fc8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10e      	bne.n	8001fec <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f834 	bl	8002054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d018      	beq.n	8002030 <HAL_ADC_IRQHandler+0x424>
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f043 0208 	orr.w	r2, r3, #8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002028:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fd56 	bl	8002adc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002030:	bf00      	nop
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	50040000 	.word	0x50040000
 800203c:	50040300 	.word	0x50040300

08002040 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0b6      	sub	sp, #216	; 0xd8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x22>
 8002086:	2302      	movs	r3, #2
 8002088:	e3c7      	b.n	800281a <HAL_ADC_ConfigChannel+0x7b2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fb7f 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 83a8 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d824      	bhi.n	80020f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	3b02      	subs	r3, #2
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d81b      	bhi.n	80020ee <HAL_ADC_ConfigChannel+0x86>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <HAL_ADC_ConfigChannel+0x54>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020d5 	.word	0x080020d5
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020e5 	.word	0x080020e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	220c      	movs	r2, #12
 80020d0:	605a      	str	r2, [r3, #4]
          break;
 80020d2:	e011      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2212      	movs	r2, #18
 80020d8:	605a      	str	r2, [r3, #4]
          break;
 80020da:	e00d      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2218      	movs	r2, #24
 80020e0:	605a      	str	r2, [r3, #4]
          break;
 80020e2:	e009      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ea:	605a      	str	r2, [r3, #4]
          break;
 80020ec:	e004      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2206      	movs	r2, #6
 80020f2:	605a      	str	r2, [r3, #4]
          break;
 80020f4:	e000      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	f7ff fa15 	bl	8001534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fb43 	bl	800179a <LL_ADC_REG_IsConversionOngoing>
 8002114:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb4f 	bl	80017c0 <LL_ADC_INJ_IsConversionOngoing>
 8002122:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 81a6 	bne.w	800247c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002134:	2b00      	cmp	r3, #0
 8002136:	f040 81a1 	bne.w	800247c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	461a      	mov	r2, r3
 8002148:	f7ff fa33 	bl	80015b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	08db      	lsrs	r3, r3, #3
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b04      	cmp	r3, #4
 800216c:	d00a      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800217e:	f7ff f971 	bl	8001464 <LL_ADC_SetOffset>
 8002182:	e17b      	b.n	800247c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f98e 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x148>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f983 	bl	80014ac <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	e01e      	b.n	80021ee <HAL_ADC_ConfigChannel+0x186>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f978 	bl	80014ac <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e004      	b.n	80021ec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80021e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x19e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	e018      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1d0>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800221a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800221e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800222e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f947 	bl	80014d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f92b 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x20e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f920 	bl	80014ac <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	e01e      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x24c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff f915 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800229c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x264>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	e018      	b.n	80022fe <HAL_ADC_ConfigChannel+0x296>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e004      	b.n	80022fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80022f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022fe:	429a      	cmp	r2, r3
 8002300:	d106      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f8e4 	bl	80014d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f8c8 	bl	80014ac <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2d4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2102      	movs	r1, #2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f8bd 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 021f 	and.w	r2, r3, #31
 800233a:	e01e      	b.n	800237a <HAL_ADC_ConfigChannel+0x312>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f8b2 	bl	80014ac <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800235a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800235e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e004      	b.n	8002378 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800236e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x32a>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	e016      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x358>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e004      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2102      	movs	r1, #2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff f883 	bl	80014d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2103      	movs	r1, #3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f867 	bl	80014ac <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x396>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2103      	movs	r1, #3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f85c 	bl	80014ac <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	e017      	b.n	800242e <HAL_ADC_ConfigChannel+0x3c6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2103      	movs	r1, #3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f851 	bl	80014ac <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002418:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800241a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x3de>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0e9b      	lsrs	r3, r3, #26
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	e011      	b.n	800246a <HAL_ADC_ConfigChannel+0x402>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002456:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e003      	b.n	800246a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800246a:	429a      	cmp	r2, r3
 800246c:	d106      	bne.n	800247c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	2103      	movs	r1, #3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f82e 	bl	80014d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff f963 	bl	800174c <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 813f 	bne.w	800270c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	f7ff f8b4 	bl	8001608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a8e      	ldr	r2, [pc, #568]	; (80026e0 <HAL_ADC_ConfigChannel+0x678>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f040 8130 	bne.w	800270c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x46c>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e019      	b.n	8002508 <HAL_ADC_ConfigChannel+0x4a0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e003      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80024f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2b09      	cmp	r3, #9
 8002500:	bf94      	ite	ls
 8002502:	2301      	movls	r3, #1
 8002504:	2300      	movhi	r3, #0
 8002506:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	2b00      	cmp	r3, #0
 800250a:	d079      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4c0>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	3301      	adds	r3, #1
 8002520:	069b      	lsls	r3, r3, #26
 8002522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002526:	e015      	b.n	8002554 <HAL_ADC_ConfigChannel+0x4ec>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002538:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800253a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	069b      	lsls	r3, r3, #26
 8002550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x50c>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	e017      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x53c>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002584:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	ea42 0103 	orr.w	r1, r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x562>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	051b      	lsls	r3, r3, #20
 80025c8:	e018      	b.n	80025fc <HAL_ADC_ConfigChannel+0x594>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fc:	430b      	orrs	r3, r1
 80025fe:	e080      	b.n	8002702 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_ADC_ConfigChannel+0x5b4>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	069b      	lsls	r3, r3, #26
 8002616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261a:	e015      	b.n	8002648 <HAL_ADC_ConfigChannel+0x5e0>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x600>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	3301      	adds	r3, #1
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	e017      	b.n	8002698 <HAL_ADC_ConfigChannel+0x630>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	61fb      	str	r3, [r7, #28]
  return result;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	ea42 0103 	orr.w	r1, r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x65c>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	051b      	lsls	r3, r3, #20
 80026be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c2:	e01d      	b.n	8002700 <HAL_ADC_ConfigChannel+0x698>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	613b      	str	r3, [r7, #16]
  return result;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e005      	b.n	80026ec <HAL_ADC_ConfigChannel+0x684>
 80026e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	3b1e      	subs	r3, #30
 80026fa:	051b      	lsls	r3, r3, #20
 80026fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002700:	430b      	orrs	r3, r1
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe ff53 	bl	80015b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b44      	ldr	r3, [pc, #272]	; (8002824 <HAL_ADC_ConfigChannel+0x7bc>)
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d07a      	beq.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002718:	4843      	ldr	r0, [pc, #268]	; (8002828 <HAL_ADC_ConfigChannel+0x7c0>)
 800271a:	f7fe fe95 	bl	8001448 <LL_ADC_GetCommonPathInternalCh>
 800271e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a41      	ldr	r2, [pc, #260]	; (800282c <HAL_ADC_ConfigChannel+0x7c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d12c      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800272c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d126      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3c      	ldr	r2, [pc, #240]	; (8002830 <HAL_ADC_ConfigChannel+0x7c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_ADC_ConfigChannel+0x6e4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3b      	ldr	r2, [pc, #236]	; (8002834 <HAL_ADC_ConfigChannel+0x7cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d15d      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002754:	4619      	mov	r1, r3
 8002756:	4834      	ldr	r0, [pc, #208]	; (8002828 <HAL_ADC_ConfigChannel+0x7c0>)
 8002758:	f7fe fe63 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_ADC_ConfigChannel+0x7d0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a36      	ldr	r2, [pc, #216]	; (800283c <HAL_ADC_ConfigChannel+0x7d4>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002776:	e002      	b.n	800277e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002784:	e040      	b.n	8002808 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2d      	ldr	r2, [pc, #180]	; (8002840 <HAL_ADC_ConfigChannel+0x7d8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d118      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x75a>
 8002790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d112      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a23      	ldr	r2, [pc, #140]	; (8002830 <HAL_ADC_ConfigChannel+0x7c8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x748>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a22      	ldr	r2, [pc, #136]	; (8002834 <HAL_ADC_ConfigChannel+0x7cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d12d      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b8:	4619      	mov	r1, r3
 80027ba:	481b      	ldr	r0, [pc, #108]	; (8002828 <HAL_ADC_ConfigChannel+0x7c0>)
 80027bc:	f7fe fe31 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c0:	e024      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_ADC_ConfigChannel+0x7dc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d120      	bne.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11a      	bne.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_ADC_ConfigChannel+0x7c8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d115      	bne.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ea:	4619      	mov	r1, r3
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <HAL_ADC_ConfigChannel+0x7c0>)
 80027ee:	f7fe fe18 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 80027f2:	e00c      	b.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002806:	e002      	b.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002816:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800281a:	4618      	mov	r0, r3
 800281c:	37d8      	adds	r7, #216	; 0xd8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	80080000 	.word	0x80080000
 8002828:	50040300 	.word	0x50040300
 800282c:	c7520000 	.word	0xc7520000
 8002830:	50040000 	.word	0x50040000
 8002834:	50040200 	.word	0x50040200
 8002838:	20000000 	.word	0x20000000
 800283c:	053e2d63 	.word	0x053e2d63
 8002840:	cb840000 	.word	0xcb840000
 8002844:	80000001 	.word	0x80000001

08002848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe ff77 	bl	800174c <LL_ADC_IsEnabled>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d169      	bne.n	8002938 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <ADC_Enable+0xfc>)
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e055      	b.n	800293a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe ff46 	bl	8001724 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002898:	482b      	ldr	r0, [pc, #172]	; (8002948 <ADC_Enable+0x100>)
 800289a:	f7fe fdd5 	bl	8001448 <LL_ADC_GetCommonPathInternalCh>
 800289e:	4603      	mov	r3, r0
 80028a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a8:	4b28      	ldr	r3, [pc, #160]	; (800294c <ADC_Enable+0x104>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <ADC_Enable+0x108>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028c2:	e002      	b.n	80028ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028d0:	f7fe fd64 	bl	800139c <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d6:	e028      	b.n	800292a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe ff35 	bl	800174c <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff19 	bl	8001724 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f2:	f7fe fd53 	bl	800139c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d914      	bls.n	800292a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00d      	beq.n	800292a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e007      	b.n	800293a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d1cf      	bne.n	80028d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	8000003f 	.word	0x8000003f
 8002948:	50040300 	.word	0x50040300
 800294c:	20000000 	.word	0x20000000
 8002950:	053e2d63 	.word	0x053e2d63

08002954 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d14b      	bne.n	8002a06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d021      	beq.n	80029cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fdbe 	bl	800150e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d032      	beq.n	80029fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d12b      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11f      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
 80029ca:	e018      	b.n	80029fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d111      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7fe f902 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a04:	e00e      	b.n	8002a24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fb1e 	bl	8002054 <HAL_ADC_ErrorCallback>
}
 8002a18:	e004      	b.n	8002a24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7fe f8da 	bl	8000bf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff faf0 	bl	8002054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <LL_ADC_IsEnabled>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <LL_ADC_IsEnabled+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_ADC_IsEnabled+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b09f      	sub	sp, #124	; 0x7c
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e093      	b.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b52:	2300      	movs	r3, #0
 8002b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b56:	2300      	movs	r3, #0
 8002b58:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a47      	ldr	r2, [pc, #284]	; (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e001      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e072      	b.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff87 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002b94:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff81 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d154      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d151      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002bae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02c      	beq.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bca:	035b      	lsls	r3, r3, #13
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bd4:	4829      	ldr	r0, [pc, #164]	; (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bd6:	f7ff ff51 	bl	8002a7c <LL_ADC_IsEnabled>
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4828      	ldr	r0, [pc, #160]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bde:	f7ff ff4d 	bl	8002a7c <LL_ADC_IsEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	431c      	orrs	r4, r3
 8002be6:	4828      	ldr	r0, [pc, #160]	; (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002be8:	f7ff ff48 	bl	8002a7c <LL_ADC_IsEnabled>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4323      	orrs	r3, r4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d137      	bne.n	8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bfc:	f023 030f 	bic.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	6811      	ldr	r1, [r2, #0]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c10:	e028      	b.n	8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c1e:	4817      	ldr	r0, [pc, #92]	; (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c20:	f7ff ff2c 	bl	8002a7c <LL_ADC_IsEnabled>
 8002c24:	4604      	mov	r4, r0
 8002c26:	4816      	ldr	r0, [pc, #88]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c28:	f7ff ff28 	bl	8002a7c <LL_ADC_IsEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	431c      	orrs	r4, r3
 8002c30:	4815      	ldr	r0, [pc, #84]	; (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c32:	f7ff ff23 	bl	8002a7c <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4323      	orrs	r3, r4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d112      	bne.n	8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c46:	f023 030f 	bic.w	r3, r3, #15
 8002c4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c4c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c4e:	e009      	b.n	8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c62:	e000      	b.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	377c      	adds	r7, #124	; 0x7c
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	50040000 	.word	0x50040000
 8002c80:	50040100 	.word	0x50040100
 8002c84:	50040300 	.word	0x50040300
 8002c88:	50040200 	.word	0x50040200

08002c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f7ff ff8e 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff29 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e54:	f7ff ff3e 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f7ff ff8e 	bl	8002d80 <NVIC_EncodePriority>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff5d 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff31 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffa2 	bl	8002de8 <SysTick_Config>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e098      	b.n	8002ff4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <HAL_DMA_Init+0x150>)
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d80f      	bhi.n	8002eee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_DMA_Init+0x154>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a4b      	ldr	r2, [pc, #300]	; (8003008 <HAL_DMA_Init+0x158>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	009a      	lsls	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a48      	ldr	r2, [pc, #288]	; (800300c <HAL_DMA_Init+0x15c>)
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
 8002eec:	e00e      	b.n	8002f0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_DMA_Init+0x160>)
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4a43      	ldr	r2, [pc, #268]	; (8003008 <HAL_DMA_Init+0x158>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	009a      	lsls	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_DMA_Init+0x164>)
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f66:	d039      	beq.n	8002fdc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_DMA_Init+0x15c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d11a      	bne.n	8002fa8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_DMA_Init+0x168>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	210f      	movs	r1, #15
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4924      	ldr	r1, [pc, #144]	; (8003018 <HAL_DMA_Init+0x168>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_DMA_Init+0x168>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f003 031c 	and.w	r3, r3, #28
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	491d      	ldr	r1, [pc, #116]	; (8003018 <HAL_DMA_Init+0x168>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
 8002fa6:	e019      	b.n	8002fdc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_DMA_Init+0x16c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f003 031c 	and.w	r3, r3, #28
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4917      	ldr	r1, [pc, #92]	; (800301c <HAL_DMA_Init+0x16c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_DMA_Init+0x16c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 031c 	and.w	r3, r3, #28
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <HAL_DMA_Init+0x16c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40020407 	.word	0x40020407
 8003004:	bffdfff8 	.word	0xbffdfff8
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	40020000 	.word	0x40020000
 8003010:	bffdfbf8 	.word	0xbffdfbf8
 8003014:	40020400 	.word	0x40020400
 8003018:	400200a8 	.word	0x400200a8
 800301c:	400204a8 	.word	0x400204a8

08003020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Start_IT+0x20>
 800303c:	2302      	movs	r3, #2
 800303e:	e04b      	b.n	80030d8 <HAL_DMA_Start_IT+0xb8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13a      	bne.n	80030ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f8e0 	bl	800323e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 020e 	orr.w	r2, r2, #14
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e00f      	b.n	80030b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0204 	bic.w	r2, r2, #4
 80030a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 020a 	orr.w	r2, r2, #10
 80030b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e005      	b.n	80030d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f003 031c 	and.w	r3, r3, #28
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d026      	beq.n	800315a <HAL_DMA_IRQHandler+0x7a>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d021      	beq.n	800315a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f003 021c 	and.w	r2, r3, #28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2104      	movs	r1, #4
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	2b00      	cmp	r3, #0
 800314e:	d071      	beq.n	8003234 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003158:	e06c      	b.n	8003234 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f003 031c 	and.w	r3, r3, #28
 8003162:	2202      	movs	r2, #2
 8003164:	409a      	lsls	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02e      	beq.n	80031cc <HAL_DMA_IRQHandler+0xec>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d029      	beq.n	80031cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 020a 	bic.w	r2, r2, #10
 8003194:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f003 021c 	and.w	r2, r3, #28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2102      	movs	r1, #2
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d038      	beq.n	8003234 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031ca:	e033      	b.n	8003234 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f003 031c 	and.w	r3, r3, #28
 80031d4:	2208      	movs	r2, #8
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02a      	beq.n	8003236 <HAL_DMA_IRQHandler+0x156>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d025      	beq.n	8003236 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020e 	bic.w	r2, r2, #14
 80031f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f003 021c 	and.w	r2, r3, #28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003234:	bf00      	nop
 8003236:	bf00      	nop
}
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f003 021c 	and.w	r2, r3, #28
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b10      	cmp	r3, #16
 800326e:	d108      	bne.n	8003282 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003280:	e007      	b.n	8003292 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	60da      	str	r2, [r3, #12]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ae:	e17f      	b.n	80035b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	4013      	ands	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8171 	beq.w	80035aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d005      	beq.n	80032e0 <HAL_GPIO_Init+0x40>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d130      	bne.n	8003342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003316:	2201      	movs	r2, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0201 	and.w	r2, r3, #1
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b03      	cmp	r3, #3
 800334c:	d118      	bne.n	8003380 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003354:	2201      	movs	r2, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	08db      	lsrs	r3, r3, #3
 800336a:	f003 0201 	and.w	r2, r3, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d017      	beq.n	80033bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d123      	bne.n	8003410 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	220f      	movs	r2, #15
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	6939      	ldr	r1, [r7, #16]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80ac 	beq.w	80035aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <HAL_GPIO_Init+0x330>)
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_GPIO_Init+0x330>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6613      	str	r3, [r2, #96]	; 0x60
 800345e:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_GPIO_Init+0x330>)
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800346a:	4a5a      	ldr	r2, [pc, #360]	; (80035d4 <HAL_GPIO_Init+0x334>)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003494:	d025      	beq.n	80034e2 <HAL_GPIO_Init+0x242>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4f      	ldr	r2, [pc, #316]	; (80035d8 <HAL_GPIO_Init+0x338>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01f      	beq.n	80034de <HAL_GPIO_Init+0x23e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4e      	ldr	r2, [pc, #312]	; (80035dc <HAL_GPIO_Init+0x33c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d019      	beq.n	80034da <HAL_GPIO_Init+0x23a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_GPIO_Init+0x340>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0x236>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_GPIO_Init+0x344>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00d      	beq.n	80034d2 <HAL_GPIO_Init+0x232>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <HAL_GPIO_Init+0x348>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <HAL_GPIO_Init+0x22e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_GPIO_Init+0x34c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_GPIO_Init+0x22a>
 80034c6:	2306      	movs	r3, #6
 80034c8:	e00c      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034ca:	2307      	movs	r3, #7
 80034cc:	e00a      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034ce:	2305      	movs	r3, #5
 80034d0:	e008      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034d2:	2304      	movs	r3, #4
 80034d4:	e006      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034d6:	2303      	movs	r3, #3
 80034d8:	e004      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034da:	2302      	movs	r3, #2
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_GPIO_Init+0x244>
 80034e2:	2300      	movs	r3, #0
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	f002 0203 	and.w	r2, r2, #3
 80034ea:	0092      	lsls	r2, r2, #2
 80034ec:	4093      	lsls	r3, r2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034f4:	4937      	ldr	r1, [pc, #220]	; (80035d4 <HAL_GPIO_Init+0x334>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	3302      	adds	r3, #2
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_GPIO_Init+0x350>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003526:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <HAL_GPIO_Init+0x350>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_GPIO_Init+0x350>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_GPIO_Init+0x350>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_GPIO_Init+0x350>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_GPIO_Init+0x350>)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_GPIO_Init+0x350>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035a4:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_GPIO_Init+0x350>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3301      	adds	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f47f ae78 	bne.w	80032b0 <HAL_GPIO_Init+0x10>
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010000 	.word	0x40010000
 80035d8:	48000400 	.word	0x48000400
 80035dc:	48000800 	.word	0x48000800
 80035e0:	48000c00 	.word	0x48000c00
 80035e4:	48001000 	.word	0x48001000
 80035e8:	48001400 	.word	0x48001400
 80035ec:	48001800 	.word	0x48001800
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e001      	b.n	8003616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	807b      	strh	r3, [r7, #2]
 8003630:	4613      	mov	r3, r2
 8003632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003634:	787b      	ldrb	r3, [r7, #1]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003640:	e002      	b.n	8003648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e081      	b.n	800376a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fb76 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	; 0x24
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	e006      	b.n	80036dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d104      	bne.n	80036ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69d9      	ldr	r1, [r3, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1a      	ldr	r2, [r3, #32]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	d138      	bne.n	80037fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003792:	2302      	movs	r3, #2
 8003794:	e032      	b.n	80037fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2224      	movs	r2, #36	; 0x24
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	d139      	bne.n	8003892 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003828:	2302      	movs	r3, #2
 800382a:	e033      	b.n	8003894 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
  }
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b08f      	sub	sp, #60	; 0x3c
 80038a4:	af0a      	add	r7, sp, #40	; 0x28
 80038a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e116      	b.n	8003ae0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fd fc25 	bl	800111c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2203      	movs	r2, #3
 80038d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 ff79 	bl	80087e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	687e      	ldr	r6, [r7, #4]
 80038fe:	466d      	mov	r5, sp
 8003900:	f106 0410 	add.w	r4, r6, #16
 8003904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800390a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800390c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003910:	e885 0003 	stmia.w	r5, {r0, r1}
 8003914:	1d33      	adds	r3, r6, #4
 8003916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003918:	6838      	ldr	r0, [r7, #0]
 800391a:	f004 ff39 	bl	8008790 <USB_CoreInit>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0d7      	b.n	8003ae0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f004 ff67 	bl	800880a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e04a      	b.n	80039d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	333d      	adds	r3, #61	; 0x3d
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	333c      	adds	r3, #60	; 0x3c
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	b298      	uxth	r0, r3
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3344      	adds	r3, #68	; 0x44
 800397e:	4602      	mov	r2, r0
 8003980:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3340      	adds	r3, #64	; 0x40
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3348      	adds	r3, #72	; 0x48
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	334c      	adds	r3, #76	; 0x4c
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3354      	adds	r3, #84	; 0x54
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	3301      	adds	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d3af      	bcc.n	8003942 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e044      	b.n	8003a72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3b5      	bcc.n	80039e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	687e      	ldr	r6, [r7, #4]
 8003a84:	466d      	mov	r5, sp
 8003a86:	f106 0410 	add.w	r4, r6, #16
 8003a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a96:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a9a:	1d33      	adds	r3, r6, #4
 8003a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f004 ff00 	bl	80088a4 <USB_DevInit>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e014      	b.n	8003ae0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f80a 	bl	8003ae8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 f8ac 	bl	8008c36 <USB_DevDisconnect>

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ae8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	f043 0303 	orr.w	r3, r3, #3
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40007000 	.word	0x40007000

08003b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5a:	d130      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5c:	4b23      	ldr	r3, [pc, #140]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b68:	d038      	beq.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2232      	movs	r2, #50	; 0x32
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0c9b      	lsrs	r3, r3, #18
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b90:	e002      	b.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d102      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f2      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb8:	d110      	bne.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d007      	beq.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd4:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	431bde83 	.word	0x431bde83

08003bf8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c06:	6053      	str	r3, [r2, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40007000 	.word	0x40007000

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e3ca      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4b97      	ldr	r3, [pc, #604]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80e4 	beq.w	8003e14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4a>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	f040 808b 	bne.w	8003d70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 8087 	bne.w	8003d70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c62:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e3a2      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	4b82      	ldr	r3, [pc, #520]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_RCC_OscConfig+0x7c>
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c92:	e005      	b.n	8003ca0 <HAL_RCC_OscConfig+0x88>
 8003c94:	4b7c      	ldr	r3, [pc, #496]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d223      	bcs.n	8003cec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd55 	bl	8004758 <RCC_SetFlashLatencyFromMSIRange>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e383      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb8:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a72      	ldr	r2, [pc, #456]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	f043 0308 	orr.w	r3, r3, #8
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b70      	ldr	r3, [pc, #448]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	496d      	ldr	r1, [pc, #436]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	4968      	ldr	r1, [pc, #416]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
 8003cea:	e025      	b.n	8003d38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cec:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a65      	ldr	r2, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	f043 0308 	orr.w	r3, r3, #8
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4960      	ldr	r1, [pc, #384]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	495b      	ldr	r1, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fd15 	bl	8004758 <RCC_SetFlashLatencyFromMSIRange>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e343      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d38:	f000 fc4a 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	4950      	ldr	r1, [pc, #320]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
 8003d54:	4a4e      	ldr	r2, [pc, #312]	; (8003e90 <HAL_RCC_OscConfig+0x278>)
 8003d56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d58:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd facd 	bl	80012fc <HAL_InitTick>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d052      	beq.n	8003e12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	e327      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d032      	beq.n	8003dde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a42      	ldr	r2, [pc, #264]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d84:	f7fd fb0a 	bl	800139c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d8c:	f7fd fb06 	bl	800139c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e310      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a36      	ldr	r2, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003db0:	f043 0308 	orr.w	r3, r3, #8
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4931      	ldr	r1, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	492c      	ldr	r1, [pc, #176]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
 8003ddc:	e01a      	b.n	8003e14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dea:	f7fd fad7 	bl	800139c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df2:	f7fd fad3 	bl	800139c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e2dd      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x1da>
 8003e10:	e000      	b.n	8003e14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d074      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x21a>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d10e      	bne.n	8003e4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d064      	beq.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d160      	bne.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e2ba      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x24a>
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e026      	b.n	8003eb0 <HAL_RCC_OscConfig+0x298>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6a:	d115      	bne.n	8003e98 <HAL_RCC_OscConfig+0x280>
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a02      	ldr	r2, [pc, #8]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e014      	b.n	8003eb0 <HAL_RCC_OscConfig+0x298>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	08009160 	.word	0x08009160
 8003e90:	20000000 	.word	0x20000000
 8003e94:	20000004 	.word	0x20000004
 8003e98:	4ba0      	ldr	r3, [pc, #640]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a9f      	ldr	r2, [pc, #636]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b9d      	ldr	r3, [pc, #628]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a9c      	ldr	r2, [pc, #624]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fa70 	bl	800139c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd fa6c 	bl	800139c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e276      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	4b92      	ldr	r3, [pc, #584]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2a8>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fa5c 	bl	800139c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fa58 	bl	800139c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e262      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2d0>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d060      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x310>
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d119      	bne.n	8003f56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d116      	bne.n	8003f56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f28:	4b7c      	ldr	r3, [pc, #496]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_OscConfig+0x328>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e23f      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	4973      	ldr	r1, [pc, #460]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f54:	e040      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d023      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5e:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6e      	ldr	r2, [pc, #440]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd fa17 	bl	800139c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fd fa13 	bl	800139c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e21d      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f84:	4b65      	ldr	r3, [pc, #404]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f90:	4b62      	ldr	r3, [pc, #392]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	495f      	ldr	r1, [pc, #380]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
 8003fa4:	e018      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa6:	4b5d      	ldr	r3, [pc, #372]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5c      	ldr	r2, [pc, #368]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f9f3 	bl	800139c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fba:	f7fd f9ef 	bl	800139c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1f9      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03c      	beq.n	800405e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01c      	beq.n	8004026 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fd f9ce 	bl	800139c <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004004:	f7fd f9ca 	bl	800139c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1d4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004016:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ef      	beq.n	8004004 <HAL_RCC_OscConfig+0x3ec>
 8004024:	e01b      	b.n	800405e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402c:	4a3b      	ldr	r2, [pc, #236]	; (800411c <HAL_RCC_OscConfig+0x504>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fd f9b1 	bl	800139c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403e:	f7fd f9ad 	bl	800139c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1b7      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ef      	bne.n	800403e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80a6 	beq.w	80041b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004070:	4b2a      	ldr	r3, [pc, #168]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10d      	bne.n	8004098 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	4b27      	ldr	r3, [pc, #156]	; (800411c <HAL_RCC_OscConfig+0x504>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004086:	6593      	str	r3, [r2, #88]	; 0x58
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_OscConfig+0x504>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004094:	2301      	movs	r3, #1
 8004096:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCC_OscConfig+0x508>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d118      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a4:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_OscConfig+0x508>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <HAL_RCC_OscConfig+0x508>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b0:	f7fd f974 	bl	800139c <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b8:	f7fd f970 	bl	800139c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e17a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCC_OscConfig+0x508>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d108      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4d8>
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_RCC_OscConfig+0x504>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <HAL_RCC_OscConfig+0x504>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ee:	e029      	b.n	8004144 <HAL_RCC_OscConfig+0x52c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d115      	bne.n	8004124 <HAL_RCC_OscConfig+0x50c>
 80040f8:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_RCC_OscConfig+0x504>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <HAL_RCC_OscConfig+0x504>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	4a03      	ldr	r2, [pc, #12]	; (800411c <HAL_RCC_OscConfig+0x504>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004118:	e014      	b.n	8004144 <HAL_RCC_OscConfig+0x52c>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
 8004124:	4b9c      	ldr	r3, [pc, #624]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	4a9b      	ldr	r2, [pc, #620]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004134:	4b98      	ldr	r3, [pc, #608]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	4a97      	ldr	r2, [pc, #604]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800413c:	f023 0304 	bic.w	r3, r3, #4
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d016      	beq.n	800417a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd f926 	bl	800139c <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004152:	e00a      	b.n	800416a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fd f922 	bl	800139c <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e12a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800416a:	4b8b      	ldr	r3, [pc, #556]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ed      	beq.n	8004154 <HAL_RCC_OscConfig+0x53c>
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fd f90f 	bl	800139c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd f90b 	bl	800139c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e113      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004198:	4b7f      	ldr	r3, [pc, #508]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ed      	bne.n	8004182 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a6:	7ffb      	ldrb	r3, [r7, #31]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ac:	4b7a      	ldr	r3, [pc, #488]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	4a79      	ldr	r2, [pc, #484]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80041b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80fe 	beq.w	80043be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	f040 80d0 	bne.w	800436c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041cc:	4b72      	ldr	r3, [pc, #456]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0203 	and.w	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d130      	bne.n	8004242 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	3b01      	subs	r3, #1
 80041ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d127      	bne.n	8004242 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d11f      	bne.n	8004242 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800420c:	2a07      	cmp	r2, #7
 800420e:	bf14      	ite	ne
 8004210:	2201      	movne	r2, #1
 8004212:	2200      	moveq	r2, #0
 8004214:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004216:	4293      	cmp	r3, r2
 8004218:	d113      	bne.n	8004242 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d109      	bne.n	8004242 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	3b01      	subs	r3, #1
 800423c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d06e      	beq.n	8004320 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d069      	beq.n	800431c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004248:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004254:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0ad      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004264:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a4b      	ldr	r2, [pc, #300]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800426a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800426e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004270:	f7fd f894 	bl	800139c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fd f890 	bl	800139c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e09a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428a:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004296:	4b40      	ldr	r3, [pc, #256]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	4b40      	ldr	r3, [pc, #256]	; (800439c <HAL_RCC_OscConfig+0x784>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042b0:	0212      	lsls	r2, r2, #8
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b8:	0852      	lsrs	r2, r2, #1
 80042ba:	3a01      	subs	r2, #1
 80042bc:	0552      	lsls	r2, r2, #21
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042c4:	0852      	lsrs	r2, r2, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0652      	lsls	r2, r2, #25
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d0:	0912      	lsrs	r2, r2, #4
 80042d2:	0452      	lsls	r2, r2, #17
 80042d4:	430a      	orrs	r2, r1
 80042d6:	4930      	ldr	r1, [pc, #192]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042dc:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042f4:	f7fd f852 	bl	800139c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fd f84e 	bl	800139c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e058      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800431a:	e050      	b.n	80043be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e04f      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d148      	bne.n	80043be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004336:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a16      	ldr	r2, [pc, #88]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004344:	f7fd f82a 	bl	800139c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd f826 	bl	800139c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e030      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x734>
 800436a:	e028      	b.n	80043be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d023      	beq.n	80043ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a08      	ldr	r2, [pc, #32]	; (8004398 <HAL_RCC_OscConfig+0x780>)
 8004378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800437c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fd f80d 	bl	800139c <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004384:	e00c      	b.n	80043a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004386:	f7fd f809 	bl	800139c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d905      	bls.n	80043a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e013      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
 8004398:	40021000 	.word	0x40021000
 800439c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_RCC_OscConfig+0x7b0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ec      	bne.n	8004386 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x7b0>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4905      	ldr	r1, [pc, #20]	; (80043c8 <HAL_RCC_OscConfig+0x7b0>)
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCC_OscConfig+0x7b4>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	60cb      	str	r3, [r1, #12]
 80043b8:	e001      	b.n	80043be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	feeefffc 	.word	0xfeeefffc

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0e7      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b75      	ldr	r3, [pc, #468]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d910      	bls.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b72      	ldr	r3, [pc, #456]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4970      	ldr	r1, [pc, #448]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b6e      	ldr	r3, [pc, #440]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0cf      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d010      	beq.n	8004442 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442c:	429a      	cmp	r2, r3
 800442e:	d908      	bls.n	8004442 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b63      	ldr	r3, [pc, #396]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4960      	ldr	r1, [pc, #384]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d04c      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	4b5a      	ldr	r3, [pc, #360]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d121      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0a6      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d115      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e09a      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004486:	4b4e      	ldr	r3, [pc, #312]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e08e      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004496:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e086      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 0203 	bic.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4943      	ldr	r1, [pc, #268]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fc ff70 	bl	800139c <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fc ff6c 	bl	800139c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e06e      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004500:	429a      	cmp	r2, r3
 8004502:	d208      	bcs.n	8004516 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b2e      	ldr	r3, [pc, #184]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	492b      	ldr	r1, [pc, #172]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d210      	bcs.n	8004546 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 0207 	bic.w	r2, r3, #7
 800452c:	4923      	ldr	r1, [pc, #140]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004534:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_RCC_ClockConfig+0x1ec>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e036      	b.n	80045b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4918      	ldr	r1, [pc, #96]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4910      	ldr	r1, [pc, #64]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004584:	f000 f824 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	490b      	ldr	r1, [pc, #44]	; (80045c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 80045a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x1fc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc fea7 	bl	80012fc <HAL_InitTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045b2:	7afb      	ldrb	r3, [r7, #11]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08009160 	.word	0x08009160
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000004 	.word	0x20000004

080045d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045de:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x34>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d121      	bne.n	8004642 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d11e      	bne.n	8004642 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004604:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004610:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e005      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004620:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800462c:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d102      	bne.n	800464e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e004      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d101      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004656:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d134      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d003      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0xa6>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d003      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0xac>
 8004674:	e005      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004678:	617b      	str	r3, [r7, #20]
      break;
 800467a:	e005      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800467e:	617b      	str	r3, [r7, #20]
      break;
 8004680:	e002      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	617b      	str	r3, [r7, #20]
      break;
 8004686:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	3301      	adds	r3, #1
 8004694:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	fb03 f202 	mul.w	r2, r3, r2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	0e5b      	lsrs	r3, r3, #25
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	3301      	adds	r3, #1
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046c8:	69bb      	ldr	r3, [r7, #24]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3724      	adds	r7, #36	; 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	08009178 	.word	0x08009178
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	02625a00 	.word	0x02625a00

080046e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000000 	.word	0x20000000

08004700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004704:	f7ff fff0 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	; (8004728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	08009170 	.word	0x08009170

0800472c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004730:	f7ff ffda 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0adb      	lsrs	r3, r3, #11
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4904      	ldr	r1, [pc, #16]	; (8004754 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	08009170 	.word	0x08009170

08004758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004764:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004770:	f7ff f9de 	bl	8003b30 <HAL_PWREx_GetVoltageRange>
 8004774:	6178      	str	r0, [r7, #20]
 8004776:	e014      	b.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004782:	6593      	str	r3, [r2, #88]	; 0x58
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004790:	f7ff f9ce 	bl	8003b30 <HAL_PWREx_GetVoltageRange>
 8004794:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004796:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a8:	d10b      	bne.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	d919      	bls.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2ba0      	cmp	r3, #160	; 0xa0
 80047b4:	d902      	bls.n	80047bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047b6:	2302      	movs	r3, #2
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	e013      	b.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047bc:	2301      	movs	r3, #1
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e010      	b.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d902      	bls.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047c8:	2303      	movs	r3, #3
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e00a      	b.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d102      	bne.n	80047da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047d4:	2302      	movs	r3, #2
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	e004      	b.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b70      	cmp	r3, #112	; 0x70
 80047de:	d101      	bne.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047e0:	2301      	movs	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 0207 	bic.w	r2, r3, #7
 80047ec:	4909      	ldr	r1, [pc, #36]	; (8004814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	40022000 	.word	0x40022000

08004818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004820:	2300      	movs	r3, #0
 8004822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004824:	2300      	movs	r3, #0
 8004826:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004830:	2b00      	cmp	r3, #0
 8004832:	d041      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800483c:	d02a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800483e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004842:	d824      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800484a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800484e:	d81e      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004858:	d010      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800485a:	e018      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800485c:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a85      	ldr	r2, [pc, #532]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004866:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004868:	e015      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f829 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800487a:	e00c      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3320      	adds	r3, #32
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f001 f914 	bl	8005ab0 <RCCEx_PLLSAI2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	74fb      	strb	r3, [r7, #19]
      break;
 8004892:	e000      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800489c:	4b76      	ldr	r3, [pc, #472]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048aa:	4973      	ldr	r1, [pc, #460]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048b2:	e001      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d041      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048cc:	d02a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048d2:	d824      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048de:	d81e      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e8:	d010      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ea:	e018      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048ec:	4b62      	ldr	r3, [pc, #392]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a61      	ldr	r2, [pc, #388]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048f8:	e015      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f000 ffe1 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800490a:	e00c      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3320      	adds	r3, #32
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f001 f8cc 	bl	8005ab0 <RCCEx_PLLSAI2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	74fb      	strb	r3, [r7, #19]
      break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800492c:	4b52      	ldr	r3, [pc, #328]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493a:	494f      	ldr	r1, [pc, #316]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004942:	e001      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80a0 	beq.w	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	4a40      	ldr	r2, [pc, #256]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004988:	2301      	movs	r3, #1
 800498a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3a      	ldr	r2, [pc, #232]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004998:	f7fc fd00 	bl	800139c <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800499e:	e009      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a0:	f7fc fcfc 	bl	800139c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	74fb      	strb	r3, [r7, #19]
        break;
 80049b2:	e005      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ef      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d15c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049c6:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d019      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a00:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fc fcbb 	bl	800139c <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a28:	e00b      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fc fcb7 	bl	800139c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d902      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ec      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a66:	4904      	ldr	r1, [pc, #16]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a6e:	e009      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
 8004a74:	e006      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a84:	7c7b      	ldrb	r3, [r7, #17]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8a:	4b9e      	ldr	r3, [pc, #632]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	4a9d      	ldr	r2, [pc, #628]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aa2:	4b98      	ldr	r3, [pc, #608]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f023 0203 	bic.w	r2, r3, #3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	4994      	ldr	r1, [pc, #592]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ac4:	4b8f      	ldr	r3, [pc, #572]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 020c 	bic.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	498c      	ldr	r1, [pc, #560]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ae6:	4b87      	ldr	r3, [pc, #540]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	4983      	ldr	r1, [pc, #524]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b08:	4b7e      	ldr	r3, [pc, #504]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	497b      	ldr	r1, [pc, #492]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b2a:	4b76      	ldr	r3, [pc, #472]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	4972      	ldr	r1, [pc, #456]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b4c:	4b6d      	ldr	r3, [pc, #436]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	496a      	ldr	r1, [pc, #424]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	4961      	ldr	r1, [pc, #388]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b90:	4b5c      	ldr	r3, [pc, #368]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	4959      	ldr	r1, [pc, #356]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb2:	4b54      	ldr	r3, [pc, #336]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	4950      	ldr	r1, [pc, #320]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	4948      	ldr	r1, [pc, #288]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	493f      	ldr	r1, [pc, #252]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d028      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c18:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c26:	4937      	ldr	r1, [pc, #220]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c36:	d106      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a31      	ldr	r2, [pc, #196]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
 8004c44:	e011      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c4e:	d10c      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fe36 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	491f      	ldr	r1, [pc, #124]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca0:	60d3      	str	r3, [r2, #12]
 8004ca2:	e011      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fe07 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cbe:	7cfb      	ldrb	r3, [r7, #19]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02b      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce2:	4908      	ldr	r1, [pc, #32]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a02      	ldr	r2, [pc, #8]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
 8004d00:	e014      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	2101      	movs	r1, #1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fdd5 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02f      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d46:	4928      	ldr	r1, [pc, #160]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fdb2 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d68:	7cfb      	ldrb	r3, [r7, #19]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d014      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	74bb      	strb	r3, [r7, #18]
 8004d72:	e011      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3320      	adds	r3, #32
 8004d82:	2102      	movs	r1, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fe93 	bl	8005ab0 <RCCEx_PLLSAI2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db2:	490d      	ldr	r1, [pc, #52]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd6:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dde:	7cbb      	ldrb	r3, [r7, #18]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000

08004dec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dfe:	d13e      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004e00:	4bb2      	ldr	r3, [pc, #712]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e12:	d028      	beq.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1a:	f200 8542 	bhi.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e24:	d005      	beq.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d00e      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004e2e:	f000 bd38 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e32:	4ba6      	ldr	r3, [pc, #664]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	f040 8532 	bne.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	61fb      	str	r3, [r7, #28]
      break;
 8004e48:	f000 bd2d 	b.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004e4c:	4b9f      	ldr	r3, [pc, #636]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	f040 8527 	bne.w	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004e5c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e60:	61fb      	str	r3, [r7, #28]
      break;
 8004e62:	f000 bd22 	b.w	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e66:	4b99      	ldr	r3, [pc, #612]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e72:	f040 851c 	bne.w	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004e76:	4b96      	ldr	r3, [pc, #600]	; (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004e78:	61fb      	str	r3, [r7, #28]
      break;
 8004e7a:	f000 bd18 	b.w	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e7e:	4b93      	ldr	r3, [pc, #588]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d036      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d840      	bhi.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d003      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d020      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004ea0:	e039      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ea2:	4b8a      	ldr	r3, [pc, #552]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d116      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004eae:	4b87      	ldr	r3, [pc, #540]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004eba:	4b84      	ldr	r3, [pc, #528]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	e005      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	4a80      	ldr	r2, [pc, #512]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004eda:	e01f      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
      break;
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d102      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004ef0:	4b79      	ldr	r3, [pc, #484]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ef2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ef4:	e012      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
      break;
 8004efa:	e00f      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004efc:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f08:	d102      	bne.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004f0a:	4b74      	ldr	r3, [pc, #464]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004f0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004f0e:	e005      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]
      break;
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61bb      	str	r3, [r7, #24]
      break;
 8004f1a:	bf00      	nop
    }

    switch(PeriphClk)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f22:	f000 80dd 	beq.w	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f2c:	f200 84c1 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f36:	f000 80d3 	beq.w	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f40:	f200 84b7 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4a:	f000 835f 	beq.w	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	f200 84ad 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5e:	f000 847e 	beq.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f68:	f200 84a3 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f72:	f000 82cd 	beq.w	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f7c:	f200 8499 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	f000 80ab 	beq.w	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f90:	f200 848f 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9a:	f000 8090 	beq.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa4:	f200 8485 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d07f      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb6:	f200 847c 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc0:	f000 8403 	beq.w	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	f200 8472 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd4:	f000 83af 	beq.w	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fde:	f200 8468 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe8:	f000 8379 	beq.w	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff2:	f200 845e 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	f000 8344 	beq.w	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	f200 8456 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b20      	cmp	r3, #32
 800500a:	d84b      	bhi.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 844f 	beq.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3b01      	subs	r3, #1
 8005018:	2b1f      	cmp	r3, #31
 800501a:	f200 844a 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	0800520d 	.word	0x0800520d
 8005028:	0800527b 	.word	0x0800527b
 800502c:	080058b3 	.word	0x080058b3
 8005030:	0800530f 	.word	0x0800530f
 8005034:	080058b3 	.word	0x080058b3
 8005038:	080058b3 	.word	0x080058b3
 800503c:	080058b3 	.word	0x080058b3
 8005040:	08005395 	.word	0x08005395
 8005044:	080058b3 	.word	0x080058b3
 8005048:	080058b3 	.word	0x080058b3
 800504c:	080058b3 	.word	0x080058b3
 8005050:	080058b3 	.word	0x080058b3
 8005054:	080058b3 	.word	0x080058b3
 8005058:	080058b3 	.word	0x080058b3
 800505c:	080058b3 	.word	0x080058b3
 8005060:	0800540d 	.word	0x0800540d
 8005064:	080058b3 	.word	0x080058b3
 8005068:	080058b3 	.word	0x080058b3
 800506c:	080058b3 	.word	0x080058b3
 8005070:	080058b3 	.word	0x080058b3
 8005074:	080058b3 	.word	0x080058b3
 8005078:	080058b3 	.word	0x080058b3
 800507c:	080058b3 	.word	0x080058b3
 8005080:	080058b3 	.word	0x080058b3
 8005084:	080058b3 	.word	0x080058b3
 8005088:	080058b3 	.word	0x080058b3
 800508c:	080058b3 	.word	0x080058b3
 8005090:	080058b3 	.word	0x080058b3
 8005094:	080058b3 	.word	0x080058b3
 8005098:	080058b3 	.word	0x080058b3
 800509c:	080058b3 	.word	0x080058b3
 80050a0:	0800548f 	.word	0x0800548f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	f000 82c1 	beq.w	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80050ac:	f000 bc01 	b.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80050b6:	f000 fdd9 	bl	8005c6c <RCCEx_GetSAIxPeriphCLKFreq>
 80050ba:	61f8      	str	r0, [r7, #28]
      break;
 80050bc:	e3fa      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80050be:	69b9      	ldr	r1, [r7, #24]
 80050c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050c4:	f000 fdd2 	bl	8005c6c <RCCEx_GetSAIxPeriphCLKFreq>
 80050c8:	61f8      	str	r0, [r7, #28]
      break;
 80050ca:	e3f3      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80050cc:	40021000 	.word	0x40021000
 80050d0:	001312d0 	.word	0x001312d0
 80050d4:	08009178 	.word	0x08009178
 80050d8:	00f42400 	.word	0x00f42400
 80050dc:	02625a00 	.word	0x02625a00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80050e0:	4ba9      	ldr	r3, [pc, #676]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050f2:	d00c      	beq.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050fa:	d87f      	bhi.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005102:	d04e      	beq.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800510a:	d01d      	beq.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800510c:	e076      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800510e:	4b9e      	ldr	r3, [pc, #632]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d172      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800511a:	4b9b      	ldr	r3, [pc, #620]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8005126:	4b98      	ldr	r3, [pc, #608]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	e005      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8005132:	4b95      	ldr	r3, [pc, #596]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	4a93      	ldr	r2, [pc, #588]	; (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005144:	61fb      	str	r3, [r7, #28]
          break;
 8005146:	e05b      	b.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005148:	4b8f      	ldr	r3, [pc, #572]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005154:	d156      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005156:	4b8c      	ldr	r3, [pc, #560]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d14f      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005164:	4b88      	ldr	r3, [pc, #544]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	0a1b      	lsrs	r3, r3, #8
 800516a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	fb03 f202 	mul.w	r2, r3, r2
 8005178:	4b83      	ldr	r3, [pc, #524]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	3301      	adds	r3, #1
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800518a:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	0d5b      	lsrs	r3, r3, #21
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	3301      	adds	r3, #1
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	61fb      	str	r3, [r7, #28]
          break;
 80051a0:	e030      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80051a2:	4b79      	ldr	r3, [pc, #484]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ae:	d12b      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80051b0:	4b75      	ldr	r3, [pc, #468]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051bc:	d124      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051be:	4b72      	ldr	r3, [pc, #456]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	fb03 f202 	mul.w	r2, r3, r2
 80051d2:	4b6d      	ldr	r3, [pc, #436]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	3301      	adds	r3, #1
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	0d5b      	lsrs	r3, r3, #21
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	3301      	adds	r3, #1
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	61fb      	str	r3, [r7, #28]
          break;
 80051fa:	e005      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80051fc:	bf00      	nop
 80051fe:	e359      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005200:	bf00      	nop
 8005202:	e357      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005204:	bf00      	nop
 8005206:	e355      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005208:	bf00      	nop
        break;
 800520a:	e353      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800520c:	4b5e      	ldr	r3, [pc, #376]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d827      	bhi.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005235 	.word	0x08005235
 8005228:	0800523d 	.word	0x0800523d
 800522c:	08005245 	.word	0x08005245
 8005230:	08005259 	.word	0x08005259
          frequency = HAL_RCC_GetPCLK2Freq();
 8005234:	f7ff fa7a 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8005238:	61f8      	str	r0, [r7, #28]
          break;
 800523a:	e01d      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800523c:	f7ff f9c8 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8005240:	61f8      	str	r0, [r7, #28]
          break;
 8005242:	e019      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005244:	4b50      	ldr	r3, [pc, #320]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d10f      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8005252:	4b4f      	ldr	r3, [pc, #316]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005254:	61fb      	str	r3, [r7, #28]
          break;
 8005256:	e00c      	b.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005258:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800526a:	61fb      	str	r3, [r7, #28]
          break;
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800526e:	bf00      	nop
 8005270:	e320      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005272:	bf00      	nop
 8005274:	e31e      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005276:	bf00      	nop
        break;
 8005278:	e31c      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f003 030c 	and.w	r3, r3, #12
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d83a      	bhi.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052c9 	.word	0x080052c9
 8005298:	08005303 	.word	0x08005303
 800529c:	08005303 	.word	0x08005303
 80052a0:	08005303 	.word	0x08005303
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	08005303 	.word	0x08005303
 80052ac:	08005303 	.word	0x08005303
 80052b0:	08005303 	.word	0x08005303
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	08005303 	.word	0x08005303
 80052bc:	08005303 	.word	0x08005303
 80052c0:	08005303 	.word	0x08005303
 80052c4:	080052ed 	.word	0x080052ed
          frequency = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7ff fa1a 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
          break;
 80052ce:	e01d      	b.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80052d0:	f7ff f97e 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80052d4:	61f8      	str	r0, [r7, #28]
          break;
 80052d6:	e019      	b.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d10f      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80052e6:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80052e8:	61fb      	str	r3, [r7, #28]
          break;
 80052ea:	e00c      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052ec:	4b26      	ldr	r3, [pc, #152]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d107      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80052fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fe:	61fb      	str	r3, [r7, #28]
          break;
 8005300:	e003      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8005302:	bf00      	nop
 8005304:	e2d6      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005306:	bf00      	nop
 8005308:	e2d4      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800530a:	bf00      	nop
        break;
 800530c:	e2d2      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b30      	cmp	r3, #48	; 0x30
 800531e:	d021      	beq.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b30      	cmp	r3, #48	; 0x30
 8005324:	d829      	bhi.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b20      	cmp	r3, #32
 800532a:	d011      	beq.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b20      	cmp	r3, #32
 8005330:	d823      	bhi.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b10      	cmp	r3, #16
 800533c:	d004      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800533e:	e01c      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005340:	f7ff f9de 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8005344:	61f8      	str	r0, [r7, #28]
          break;
 8005346:	e01d      	b.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005348:	f7ff f942 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800534c:	61f8      	str	r0, [r7, #28]
          break;
 800534e:	e019      	b.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d10f      	bne.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005360:	61fb      	str	r3, [r7, #28]
          break;
 8005362:	e00c      	b.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	d107      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8005372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005376:	61fb      	str	r3, [r7, #28]
          break;
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800537a:	bf00      	nop
 800537c:	e29a      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800537e:	bf00      	nop
 8005380:	e298      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005382:	bf00      	nop
        break;
 8005384:	e296      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	08009178 	.word	0x08009178
 8005390:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005394:	4b9b      	ldr	r3, [pc, #620]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2bc0      	cmp	r3, #192	; 0xc0
 80053a4:	d021      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2bc0      	cmp	r3, #192	; 0xc0
 80053aa:	d829      	bhi.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d011      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d823      	bhi.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d004      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80053c4:	e01c      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053c6:	f7ff f99b 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80053ca:	61f8      	str	r0, [r7, #28]
          break;
 80053cc:	e01d      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80053ce:	f7ff f8ff 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80053d2:	61f8      	str	r0, [r7, #28]
          break;
 80053d4:	e019      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053d6:	4b8b      	ldr	r3, [pc, #556]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d10f      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80053e4:	4b88      	ldr	r3, [pc, #544]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80053e6:	61fb      	str	r3, [r7, #28]
          break;
 80053e8:	e00c      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053ea:	4b86      	ldr	r3, [pc, #536]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d107      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80053f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fc:	61fb      	str	r3, [r7, #28]
          break;
 80053fe:	e003      	b.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005400:	bf00      	nop
 8005402:	e257      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005404:	bf00      	nop
 8005406:	e255      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005408:	bf00      	nop
        break;
 800540a:	e253      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800540c:	4b7d      	ldr	r3, [pc, #500]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800541e:	d025      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005426:	d82c      	bhi.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542e:	d013      	beq.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005436:	d824      	bhi.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005444:	d004      	beq.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8005446:	e01c      	b.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005448:	f7ff f95a 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 800544c:	61f8      	str	r0, [r7, #28]
          break;
 800544e:	e01d      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005450:	f7ff f8be 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8005454:	61f8      	str	r0, [r7, #28]
          break;
 8005456:	e019      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005458:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d10f      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8005466:	4b68      	ldr	r3, [pc, #416]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005468:	61fb      	str	r3, [r7, #28]
          break;
 800546a:	e00c      	b.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800546c:	4b65      	ldr	r3, [pc, #404]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d107      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800547a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547e:	61fb      	str	r3, [r7, #28]
          break;
 8005480:	e003      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8005482:	bf00      	nop
 8005484:	e216      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005486:	bf00      	nop
 8005488:	e214      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800548a:	bf00      	nop
        break;
 800548c:	e212      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800548e:	4b5d      	ldr	r3, [pc, #372]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a0:	d025      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a8:	d82c      	bhi.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b0:	d013      	beq.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b8:	d824      	bhi.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c6:	d004      	beq.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80054c8:	e01c      	b.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054ca:	f7ff f919 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80054ce:	61f8      	str	r0, [r7, #28]
          break;
 80054d0:	e01d      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80054d2:	f7ff f87d 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80054d6:	61f8      	str	r0, [r7, #28]
          break;
 80054d8:	e019      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054da:	4b4a      	ldr	r3, [pc, #296]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d10f      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80054e8:	4b47      	ldr	r3, [pc, #284]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80054ea:	61fb      	str	r3, [r7, #28]
          break;
 80054ec:	e00c      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054ee:	4b45      	ldr	r3, [pc, #276]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d107      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80054fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005500:	61fb      	str	r3, [r7, #28]
          break;
 8005502:	e003      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005504:	bf00      	nop
 8005506:	e1d5      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005508:	bf00      	nop
 800550a:	e1d3      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800550c:	bf00      	nop
        break;
 800550e:	e1d1      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005510:	4b3c      	ldr	r3, [pc, #240]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005522:	d00c      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800552a:	d864      	bhi.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005532:	d008      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553a:	d030      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800553c:	e05b      	b.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800553e:	f7ff f847 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8005542:	61f8      	str	r0, [r7, #28]
          break;
 8005544:	e05c      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005552:	d152      	bne.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005554:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d04c      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	fb03 f202 	mul.w	r2, r3, r2
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	3301      	adds	r3, #1
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005586:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	0e5b      	lsrs	r3, r3, #25
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	3301      	adds	r3, #1
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	61fb      	str	r3, [r7, #28]
          break;
 800559c:	e02d      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055aa:	d128      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80055ac:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80055b8:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	fb03 f202 	mul.w	r2, r3, r2
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	3301      	adds	r3, #1
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	0e5b      	lsrs	r3, r3, #25
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	3301      	adds	r3, #1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	61fb      	str	r3, [r7, #28]
          break;
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80055f6:	bf00      	nop
 80055f8:	e15c      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055fa:	bf00      	nop
 80055fc:	e15a      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055fe:	bf00      	nop
        break;
 8005600:	e158      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000
 8005608:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800560c:	4b9d      	ldr	r3, [pc, #628]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005616:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800561e:	f7ff f885 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8005622:	61f8      	str	r0, [r7, #28]
        break;
 8005624:	e146      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005626:	f7fe ffd3 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800562a:	61f8      	str	r0, [r7, #28]
        break;
 800562c:	e142      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800562e:	4b95      	ldr	r3, [pc, #596]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005640:	d013      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005648:	d819      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005656:	d004      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005658:	e011      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800565a:	f7ff f851 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 800565e:	61f8      	str	r0, [r7, #28]
          break;
 8005660:	e010      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005662:	f7fe ffb5 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8005666:	61f8      	str	r0, [r7, #28]
          break;
 8005668:	e00c      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800566a:	4b86      	ldr	r3, [pc, #536]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005676:	d104      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005678:	4b83      	ldr	r3, [pc, #524]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800567a:	61fb      	str	r3, [r7, #28]
          break;
 800567c:	e001      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800567e:	bf00      	nop
 8005680:	e118      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005682:	bf00      	nop
        break;
 8005684:	e116      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005686:	4b7f      	ldr	r3, [pc, #508]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005698:	d013      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d819      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80056b0:	e011      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7ff f825 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80056b6:	61f8      	str	r0, [r7, #28]
          break;
 80056b8:	e010      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80056ba:	f7fe ff89 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80056be:	61f8      	str	r0, [r7, #28]
          break;
 80056c0:	e00c      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056c2:	4b70      	ldr	r3, [pc, #448]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ce:	d104      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80056d0:	4b6d      	ldr	r3, [pc, #436]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80056d2:	61fb      	str	r3, [r7, #28]
          break;
 80056d4:	e001      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80056d6:	bf00      	nop
 80056d8:	e0ec      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056da:	bf00      	nop
        break;
 80056dc:	e0ea      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80056de:	4b69      	ldr	r3, [pc, #420]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f0:	d013      	beq.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f8:	d819      	bhi.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d004      	beq.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005708:	e011      	b.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800570a:	f7fe fff9 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 800570e:	61f8      	str	r0, [r7, #28]
          break;
 8005710:	e010      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe ff5d 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8005716:	61f8      	str	r0, [r7, #28]
          break;
 8005718:	e00c      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800571a:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005726:	d104      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005728:	4b57      	ldr	r3, [pc, #348]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800572a:	61fb      	str	r3, [r7, #28]
          break;
 800572c:	e001      	b.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800572e:	bf00      	nop
 8005730:	e0c0      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005732:	bf00      	nop
        break;
 8005734:	e0be      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005736:	4b53      	ldr	r3, [pc, #332]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005748:	d02c      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005750:	d833      	bhi.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005758:	d01a      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005760:	d82b      	bhi.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800576e:	d004      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005770:	e023      	b.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005772:	f7fe ffc5 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8005776:	61f8      	str	r0, [r7, #28]
          break;
 8005778:	e026      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800577a:	4b42      	ldr	r3, [pc, #264]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800577c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11a      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8005788:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800578c:	61fb      	str	r3, [r7, #28]
          break;
 800578e:	e016      	b.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005790:	4b3c      	ldr	r3, [pc, #240]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579c:	d111      	bne.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800579e:	4b3a      	ldr	r3, [pc, #232]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80057a0:	61fb      	str	r3, [r7, #28]
          break;
 80057a2:	e00e      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057a4:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d109      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80057b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b6:	61fb      	str	r3, [r7, #28]
          break;
 80057b8:	e005      	b.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80057ba:	bf00      	nop
 80057bc:	e07a      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80057be:	bf00      	nop
 80057c0:	e078      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80057c2:	bf00      	nop
 80057c4:	e076      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80057c6:	bf00      	nop
        break;
 80057c8:	e074      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057dc:	d02c      	beq.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057e4:	d833      	bhi.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ec:	d01a      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f4:	d82b      	bhi.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005802:	d004      	beq.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005804:	e023      	b.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005806:	f7fe ff7b 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 800580a:	61f8      	str	r0, [r7, #28]
          break;
 800580c:	e026      	b.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800580e:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b02      	cmp	r3, #2
 800581a:	d11a      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800581c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005820:	61fb      	str	r3, [r7, #28]
          break;
 8005822:	e016      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005824:	4b17      	ldr	r3, [pc, #92]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	d111      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005834:	61fb      	str	r3, [r7, #28]
          break;
 8005836:	e00e      	b.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d109      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584a:	61fb      	str	r3, [r7, #28]
          break;
 800584c:	e005      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800584e:	bf00      	nop
 8005850:	e030      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005852:	bf00      	nop
 8005854:	e02e      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005856:	bf00      	nop
 8005858:	e02c      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800585a:	bf00      	nop
        break;
 800585c:	e02a      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d009      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8005878:	e012      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800587a:	f7fe ff41 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 800587e:	61f8      	str	r0, [r7, #28]
          break;
 8005880:	e00e      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000
 8005888:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800588c:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d101      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800589c:	61fb      	str	r3, [r7, #28]
          break;
 800589e:	bf00      	nop
        break;
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80058a2:	bf00      	nop
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80058b2:	bf00      	nop
    }
  }

  return(frequency);
 80058b4:	69fb      	ldr	r3, [r7, #28]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
 80058c4:	00f42400 	.word	0x00f42400

080058c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058d6:	4b75      	ldr	r3, [pc, #468]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d018      	beq.n	8005914 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058e2:	4b72      	ldr	r3, [pc, #456]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0203 	and.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d10d      	bne.n	800590e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
       ||
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
       ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d047      	beq.n	800599e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
 8005912:	e044      	b.n	800599e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d018      	beq.n	800594e <RCCEx_PLLSAI1_Config+0x86>
 800591c:	2b03      	cmp	r3, #3
 800591e:	d825      	bhi.n	800596c <RCCEx_PLLSAI1_Config+0xa4>
 8005920:	2b01      	cmp	r3, #1
 8005922:	d002      	beq.n	800592a <RCCEx_PLLSAI1_Config+0x62>
 8005924:	2b02      	cmp	r3, #2
 8005926:	d009      	beq.n	800593c <RCCEx_PLLSAI1_Config+0x74>
 8005928:	e020      	b.n	800596c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800592a:	4b60      	ldr	r3, [pc, #384]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11d      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593a:	e01a      	b.n	8005972 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800593c:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d116      	bne.n	8005976 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800594c:	e013      	b.n	8005976 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800594e:	4b57      	ldr	r3, [pc, #348]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10f      	bne.n	800597a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800595a:	4b54      	ldr	r3, [pc, #336]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596a:	e006      	b.n	800597a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e004      	b.n	800597c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597a:	bf00      	nop
    }

    if(status == HAL_OK)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	430b      	orrs	r3, r1
 8005998:	4944      	ldr	r1, [pc, #272]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	4313      	orrs	r3, r2
 800599c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d17d      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059a4:	4b41      	ldr	r3, [pc, #260]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a40      	ldr	r2, [pc, #256]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b0:	f7fb fcf4 	bl	800139c <HAL_GetTick>
 80059b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059b6:	e009      	b.n	80059cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059b8:	f7fb fcf0 	bl	800139c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d902      	bls.n	80059cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ca:	e005      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059cc:	4b37      	ldr	r3, [pc, #220]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ef      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d160      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d111      	bne.n	8005a08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e4:	4b31      	ldr	r3, [pc, #196]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	0211      	lsls	r1, r2, #8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	0912      	lsrs	r2, r2, #4
 80059fc:	0452      	lsls	r2, r2, #17
 80059fe:	430a      	orrs	r2, r1
 8005a00:	492a      	ldr	r1, [pc, #168]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
 8005a06:	e027      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d112      	bne.n	8005a34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6892      	ldr	r2, [r2, #8]
 8005a1e:	0211      	lsls	r1, r2, #8
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6912      	ldr	r2, [r2, #16]
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0552      	lsls	r2, r2, #21
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	491f      	ldr	r1, [pc, #124]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	610b      	str	r3, [r1, #16]
 8005a32:	e011      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a34:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6892      	ldr	r2, [r2, #8]
 8005a44:	0211      	lsls	r1, r2, #8
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6952      	ldr	r2, [r2, #20]
 8005a4a:	0852      	lsrs	r2, r2, #1
 8005a4c:	3a01      	subs	r2, #1
 8005a4e:	0652      	lsls	r2, r2, #25
 8005a50:	430a      	orrs	r2, r1
 8005a52:	4916      	ldr	r1, [pc, #88]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fb fc9a 	bl	800139c <HAL_GetTick>
 8005a68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a6a:	e009      	b.n	8005a80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a6c:	f7fb fc96 	bl	800139c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d902      	bls.n	8005a80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a7e:	e005      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0ef      	beq.n	8005a6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	4904      	ldr	r1, [pc, #16]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000

08005ab0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005abe:	4b6a      	ldr	r3, [pc, #424]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d018      	beq.n	8005afc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aca:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0203 	and.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d10d      	bne.n	8005af6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ae2:	4b61      	ldr	r3, [pc, #388]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	091b      	lsrs	r3, r3, #4
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
       ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d047      	beq.n	8005b86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
 8005afa:	e044      	b.n	8005b86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d018      	beq.n	8005b36 <RCCEx_PLLSAI2_Config+0x86>
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d825      	bhi.n	8005b54 <RCCEx_PLLSAI2_Config+0xa4>
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d002      	beq.n	8005b12 <RCCEx_PLLSAI2_Config+0x62>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d009      	beq.n	8005b24 <RCCEx_PLLSAI2_Config+0x74>
 8005b10:	e020      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b12:	4b55      	ldr	r3, [pc, #340]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11d      	bne.n	8005b5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b22:	e01a      	b.n	8005b5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b24:	4b50      	ldr	r3, [pc, #320]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d116      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b34:	e013      	b.n	8005b5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b42:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b52:	e006      	b.n	8005b62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	e004      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6819      	ldr	r1, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	4939      	ldr	r1, [pc, #228]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d167      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b8c:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a35      	ldr	r2, [pc, #212]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b98:	f7fb fc00 	bl	800139c <HAL_GetTick>
 8005b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b9e:	e009      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba0:	f7fb fbfc 	bl	800139c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d902      	bls.n	8005bb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb2:	e005      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1ef      	bne.n	8005ba0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d14a      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6892      	ldr	r2, [r2, #8]
 8005bdc:	0211      	lsls	r1, r2, #8
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68d2      	ldr	r2, [r2, #12]
 8005be2:	0912      	lsrs	r2, r2, #4
 8005be4:	0452      	lsls	r2, r2, #17
 8005be6:	430a      	orrs	r2, r1
 8005be8:	491f      	ldr	r1, [pc, #124]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	614b      	str	r3, [r1, #20]
 8005bee:	e011      	b.n	8005c14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6892      	ldr	r2, [r2, #8]
 8005c00:	0211      	lsls	r1, r2, #8
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6912      	ldr	r2, [r2, #16]
 8005c06:	0852      	lsrs	r2, r2, #1
 8005c08:	3a01      	subs	r2, #1
 8005c0a:	0652      	lsls	r2, r2, #25
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	4916      	ldr	r1, [pc, #88]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c14:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fb fbbc 	bl	800139c <HAL_GetTick>
 8005c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c26:	e009      	b.n	8005c3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c28:	f7fb fbb8 	bl	800139c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	73fb      	strb	r3, [r7, #15]
          break;
 8005c3a:	e005      	b.n	8005c48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0ef      	beq.n	8005c28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	4904      	ldr	r1, [pc, #16]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000

08005c6c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b089      	sub	sp, #36	; 0x24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c88:	d10c      	bne.n	8005ca4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c8a:	4b6e      	ldr	r3, [pc, #440]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005c94:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c9c:	d112      	bne.n	8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c9e:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	e00f      	b.n	8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d10b      	bne.n	8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005cac:	4b65      	ldr	r3, [pc, #404]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005cb6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cbe:	d101      	bne.n	8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005cc0:	4b61      	ldr	r3, [pc, #388]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005cc2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 80b4 	bne.w	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cd6:	d003      	beq.n	8005ce0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cde:	d135      	bne.n	8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005ce0:	4b58      	ldr	r3, [pc, #352]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cec:	f040 80a1 	bne.w	8005e32 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005cf0:	4b54      	ldr	r3, [pc, #336]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 809a 	beq.w	8005e32 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cfe:	4b51      	ldr	r3, [pc, #324]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	3301      	adds	r3, #1
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d12:	4b4c      	ldr	r3, [pc, #304]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005d24:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005d30:	2311      	movs	r3, #17
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e001      	b.n	8005d3a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005d36:	2307      	movs	r3, #7
 8005d38:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fb03 f202 	mul.w	r2, r3, r2
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005d4a:	e072      	b.n	8005e32 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d133      	bne.n	8005dba <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005d52:	4b3c      	ldr	r3, [pc, #240]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5e:	d169      	bne.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005d60:	4b38      	ldr	r3, [pc, #224]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d063      	beq.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d6c:	4b35      	ldr	r3, [pc, #212]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	3301      	adds	r3, #1
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005d80:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	0a1b      	lsrs	r3, r3, #8
 8005d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005d92:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005d9e:	2311      	movs	r3, #17
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e001      	b.n	8005da8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005da4:	2307      	movs	r3, #7
 8005da6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	fb03 f202 	mul.w	r2, r3, r2
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	e03c      	b.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dc0:	d003      	beq.n	8005dca <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc8:	d134      	bne.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005dca:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd6:	d12d      	bne.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d027      	beq.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	3301      	adds	r3, #1
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005df8:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e02:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005e16:	2311      	movs	r3, #17
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e001      	b.n	8005e20 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005e1c:	2307      	movs	r3, #7
 8005e1e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	fb03 f202 	mul.w	r2, r3, r2
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e000      	b.n	8005e34 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e32:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3724      	adds	r7, #36	; 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
 8005e48:	001fff68 	.word	0x001fff68

08005e4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e022      	b.n	8005ea4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fb f87b 	bl	8000f6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f814 	bl	8005eac <HAL_SD_InitCard>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e00a      	b.n	8005ea4 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005eac:	b5b0      	push	{r4, r5, r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af04      	add	r7, sp, #16
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005ec8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ecc:	f7fe ff8e 	bl	8004dec <HAL_RCCEx_GetPeriphCLKFreq>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d109      	bne.n	8005eec <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e07b      	b.n	8005fe4 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	4a3e      	ldr	r2, [pc, #248]	; (8005fec <HAL_SD_InitCard+0x140>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	3b02      	subs	r3, #2
 8005efa:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681d      	ldr	r5, [r3, #0]
 8005f00:	466c      	mov	r4, sp
 8005f02:	f107 0314 	add.w	r3, r7, #20
 8005f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f14:	4628      	mov	r0, r5
 8005f16:	f001 fec4 	bl	8007ca2 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f28:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 ff02 	bl	8007d38 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f42:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3302      	adds	r3, #2
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <HAL_SD_InitCard+0x144>)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fb fa2a 	bl	80013b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 ff27 	bl	8006db4 <SD_PowerON>
 8005f66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e02e      	b.n	8005fe4 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fe46 	bl	8006c18 <SD_InitCard>
 8005f8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e01b      	b.n	8005fe4 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 ff52 	bl	8007e5e <SDMMC_CmdBlockLength>
 8005fba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00f      	beq.n	8005fe2 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <HAL_SD_InitCard+0x148>)
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3728      	adds	r7, #40	; 0x28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bdb0      	pop	{r4, r5, r7, pc}
 8005fec:	014f8b59 	.word	0x014f8b59
 8005ff0:	00012110 	.word	0x00012110
 8005ff4:	004005ff 	.word	0x004005ff

08005ff8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b092      	sub	sp, #72	; 0x48
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006006:	f7fb f9c9 	bl	800139c <HAL_GetTick>
 800600a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e1bd      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	f040 81b0 	bne.w	8006398 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800603e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	441a      	add	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006048:	429a      	cmp	r2, r3
 800604a:	d907      	bls.n	800605c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e1a4      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2203      	movs	r2, #3
 8006060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2200      	movs	r2, #0
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006070:	2b01      	cmp	r3, #1
 8006072:	d002      	beq.n	800607a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	025b      	lsls	r3, r3, #9
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800607a:	f04f 33ff 	mov.w	r3, #4294967295
 800607e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	025b      	lsls	r3, r3, #9
 8006084:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006086:	2390      	movs	r3, #144	; 0x90
 8006088:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800608a:	2302      	movs	r3, #2
 800608c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006092:	2301      	movs	r3, #1
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f107 0214 	add.w	r2, r7, #20
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 feb0 	bl	8007e06 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d90a      	bls.n	80060c2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2202      	movs	r2, #2
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 ff14 	bl	8007ee6 <SDMMC_CmdReadMultiBlock>
 80060be:	6478      	str	r0, [r7, #68]	; 0x44
 80060c0:	e009      	b.n	80060d6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fee7 	bl	8007ea2 <SDMMC_CmdReadSingleBlock>
 80060d4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d012      	beq.n	8006102 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a7a      	ldr	r2, [pc, #488]	; (80062cc <HAL_SD_ReadBlocks+0x2d4>)
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ea:	431a      	orrs	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e151      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006106:	e061      	b.n	80061cc <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d03c      	beq.n	8006190 <HAL_SD_ReadBlocks+0x198>
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d039      	beq.n	8006190 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800611c:	2300      	movs	r3, #0
 800611e:	643b      	str	r3, [r7, #64]	; 0x40
 8006120:	e033      	b.n	800618a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fde8 	bl	8007cfc <SDMMC_ReadFIFO>
 800612c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006138:	3301      	adds	r3, #1
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800613c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613e:	3b01      	subs	r3, #1
 8006140:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	b2da      	uxtb	r2, r3
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	3301      	adds	r3, #1
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006154:	3b01      	subs	r3, #1
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006164:	3301      	adds	r3, #1
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	3b01      	subs	r3, #1
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	0e1b      	lsrs	r3, r3, #24
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	3301      	adds	r3, #1
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	3b01      	subs	r3, #1
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006186:	3301      	adds	r3, #1
 8006188:	643b      	str	r3, [r7, #64]	; 0x40
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	2b07      	cmp	r3, #7
 800618e:	d9c8      	bls.n	8006122 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006190:	f7fb f904 	bl	800139c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800619c:	429a      	cmp	r2, r3
 800619e:	d902      	bls.n	80061a6 <HAL_SD_ReadBlocks+0x1ae>
 80061a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d112      	bne.n	80061cc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a48      	ldr	r2, [pc, #288]	; (80062cc <HAL_SD_ReadBlocks+0x2d4>)
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e0ec      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d096      	beq.n	8006108 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d022      	beq.n	800622e <HAL_SD_ReadBlocks+0x236>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d91f      	bls.n	800622e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d01b      	beq.n	800622e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 feda 	bl	8007fb4 <SDMMC_CmdStopTransfer>
 8006200:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <HAL_SD_ReadBlocks+0x2d4>)
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006216:	431a      	orrs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e0bb      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a22      	ldr	r2, [pc, #136]	; (80062cc <HAL_SD_ReadBlocks+0x2d4>)
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	f043 0208 	orr.w	r2, r3, #8
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0a1      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a15      	ldr	r2, [pc, #84]	; (80062cc <HAL_SD_ReadBlocks+0x2d4>)
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	f043 0202 	orr.w	r2, r3, #2
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e087      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d064      	beq.n	800636e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <HAL_SD_ReadBlocks+0x2d4>)
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06d      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
 80062ca:	bf00      	nop
 80062cc:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fd11 	bl	8007cfc <SDMMC_ReadFIFO>
 80062da:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	3301      	adds	r3, #1
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	3b01      	subs	r3, #1
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	3301      	adds	r3, #1
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006302:	3b01      	subs	r3, #1
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	3301      	adds	r3, #1
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006318:	3b01      	subs	r3, #1
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	0e1b      	lsrs	r3, r3, #24
 8006320:	b2da      	uxtb	r2, r3
 8006322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006324:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	3301      	adds	r3, #1
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632e:	3b01      	subs	r3, #1
 8006330:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006332:	f7fb f833 	bl	800139c <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800633e:	429a      	cmp	r2, r3
 8006340:	d902      	bls.n	8006348 <HAL_SD_ReadBlocks+0x350>
 8006342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006344:	2b00      	cmp	r3, #0
 8006346:	d112      	bne.n	800636e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_SD_ReadBlocks+0x3b8>)
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e01b      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SD_ReadBlocks+0x38a>
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1a6      	bne.n	80062d0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f240 523a 	movw	r2, #1338	; 0x53a
 800638a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e006      	b.n	80063a6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3748      	adds	r7, #72	; 0x48
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	004005ff 	.word	0x004005ff

080063b4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b092      	sub	sp, #72	; 0x48
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80063c2:	f7fa ffeb 	bl	800139c <HAL_GetTick>
 80063c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e165      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	f040 8158 	bne.w	80066a4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	441a      	add	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006404:	429a      	cmp	r2, r3
 8006406:	d907      	bls.n	8006418 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e14c      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2203      	movs	r2, #3
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	2b01      	cmp	r3, #1
 800642e:	d002      	beq.n	8006436 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	025b      	lsls	r3, r3, #9
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
 800643a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	025b      	lsls	r3, r3, #9
 8006440:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006442:	2390      	movs	r3, #144	; 0x90
 8006444:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800644a:	2300      	movs	r3, #0
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800644e:	2301      	movs	r3, #1
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f107 0218 	add.w	r2, r7, #24
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f001 fcd2 	bl	8007e06 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d90a      	bls.n	800647e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fd7a 	bl	8007f6e <SDMMC_CmdWriteMultiBlock>
 800647a:	6478      	str	r0, [r7, #68]	; 0x44
 800647c:	e009      	b.n	8006492 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2210      	movs	r2, #16
 8006482:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800648a:	4618      	mov	r0, r3
 800648c:	f001 fd4d 	bl	8007f2a <SDMMC_CmdWriteSingleBlock>
 8006490:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006494:	2b00      	cmp	r3, #0
 8006496:	d012      	beq.n	80064be <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a87      	ldr	r2, [pc, #540]	; (80066bc <HAL_SD_WriteBlocks+0x308>)
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a6:	431a      	orrs	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e0f9      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80064c2:	e065      	b.n	8006590 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d040      	beq.n	8006554 <HAL_SD_WriteBlocks+0x1a0>
 80064d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d03d      	beq.n	8006554 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80064d8:	2300      	movs	r3, #0
 80064da:	643b      	str	r3, [r7, #64]	; 0x40
 80064dc:	e037      	b.n	800654e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	3301      	adds	r3, #1
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80064ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ec:	3b01      	subs	r3, #1
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	021a      	lsls	r2, r3, #8
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	3301      	adds	r3, #1
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006504:	3b01      	subs	r3, #1
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	041a      	lsls	r2, r3, #16
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	3301      	adds	r3, #1
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800651a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651c:	3b01      	subs	r3, #1
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	061a      	lsls	r2, r3, #24
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652e:	3301      	adds	r3, #1
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006534:	3b01      	subs	r3, #1
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f107 0214 	add.w	r2, r7, #20
 8006540:	4611      	mov	r1, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fbe7 	bl	8007d16 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654a:	3301      	adds	r3, #1
 800654c:	643b      	str	r3, [r7, #64]	; 0x40
 800654e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006550:	2b07      	cmp	r3, #7
 8006552:	d9c4      	bls.n	80064de <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006554:	f7fa ff22 	bl	800139c <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006560:	429a      	cmp	r2, r3
 8006562:	d902      	bls.n	800656a <HAL_SD_WriteBlocks+0x1b6>
 8006564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006566:	2b00      	cmp	r3, #0
 8006568:	d112      	bne.n	8006590 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a53      	ldr	r2, [pc, #332]	; (80066bc <HAL_SD_WriteBlocks+0x308>)
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006578:	431a      	orrs	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e090      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800659a:	2b00      	cmp	r3, #0
 800659c:	d092      	beq.n	80064c4 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d022      	beq.n	80065f2 <HAL_SD_WriteBlocks+0x23e>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d91f      	bls.n	80065f2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d01b      	beq.n	80065f2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 fcf8 	bl	8007fb4 <SDMMC_CmdStopTransfer>
 80065c4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a3a      	ldr	r2, [pc, #232]	; (80066bc <HAL_SD_WriteBlocks+0x308>)
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065da:	431a      	orrs	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e05f      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d012      	beq.n	8006626 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a2d      	ldr	r2, [pc, #180]	; (80066bc <HAL_SD_WriteBlocks+0x308>)
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	f043 0208 	orr.w	r2, r3, #8
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e045      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a20      	ldr	r2, [pc, #128]	; (80066bc <HAL_SD_WriteBlocks+0x308>)
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	f043 0202 	orr.w	r2, r3, #2
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e02b      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a13      	ldr	r2, [pc, #76]	; (80066bc <HAL_SD_WriteBlocks+0x308>)
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	f043 0210 	orr.w	r2, r3, #16
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e011      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f240 523a 	movw	r2, #1338	; 0x53a
 8006696:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e006      	b.n	80066b2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
  }
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3748      	adds	r7, #72	; 0x48
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	004005ff 	.word	0x004005ff

080066c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ce:	0f9b      	lsrs	r3, r3, #30
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	0e9b      	lsrs	r3, r3, #26
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ec:	0e1b      	lsrs	r3, r3, #24
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fe:	0c1b      	lsrs	r3, r3, #16
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	b2da      	uxtb	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006716:	b2da      	uxtb	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006720:	0d1b      	lsrs	r3, r3, #20
 8006722:	b29a      	uxth	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	b2da      	uxtb	r2, r3
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673e:	0bdb      	lsrs	r3, r3, #15
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006750:	0b9b      	lsrs	r3, r3, #14
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	b2da      	uxtb	r2, r3
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006762:	0b5b      	lsrs	r3, r3, #13
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006774:	0b1b      	lsrs	r3, r3, #12
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	b2da      	uxtb	r2, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2200      	movs	r2, #0
 8006786:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	2b00      	cmp	r3, #0
 800678e:	d163      	bne.n	8006858 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006794:	009a      	lsls	r2, r3, #2
 8006796:	f640 73fc 	movw	r3, #4092	; 0xffc
 800679a:	4013      	ands	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80067a0:	0f92      	lsrs	r2, r2, #30
 80067a2:	431a      	orrs	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	0edb      	lsrs	r3, r3, #27
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067be:	0e1b      	lsrs	r3, r3, #24
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	0d5b      	lsrs	r3, r3, #21
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e2:	0c9b      	lsrs	r3, r3, #18
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f4:	0bdb      	lsrs	r3, r3, #15
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	7e1b      	ldrb	r3, [r3, #24]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	3302      	adds	r3, #2
 8006818:	2201      	movs	r2, #1
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006822:	fb03 f202 	mul.w	r2, r3, r2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	7a1b      	ldrb	r3, [r3, #8]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	2201      	movs	r2, #1
 8006836:	409a      	lsls	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006844:	0a52      	lsrs	r2, r2, #9
 8006846:	fb03 f202 	mul.w	r2, r3, r2
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006854:	661a      	str	r2, [r3, #96]	; 0x60
 8006856:	e031      	b.n	80068bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	2b01      	cmp	r3, #1
 800685e:	d11d      	bne.n	800689c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686e:	0c1b      	lsrs	r3, r3, #16
 8006870:	431a      	orrs	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	3301      	adds	r3, #1
 800687c:	029a      	lsls	r2, r3, #10
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006890:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	661a      	str	r2, [r3, #96]	; 0x60
 800689a:	e00f      	b.n	80068bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a58      	ldr	r2, [pc, #352]	; (8006a04 <HAL_SD_GetCardCSD+0x344>)
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e09d      	b.n	80069f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	0b9b      	lsrs	r3, r3, #14
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d2:	09db      	lsrs	r3, r3, #7
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	0fdb      	lsrs	r3, r3, #31
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	0f5b      	lsrs	r3, r3, #29
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	b2da      	uxtb	r2, r3
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	0e9b      	lsrs	r3, r3, #26
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	b2da      	uxtb	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	0d9b      	lsrs	r3, r3, #22
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	b2da      	uxtb	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006936:	0d5b      	lsrs	r3, r3, #21
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	0bdb      	lsrs	r3, r3, #15
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	0b9b      	lsrs	r3, r3, #14
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	0b5b      	lsrs	r3, r3, #13
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	0b1b      	lsrs	r3, r3, #12
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	0a9b      	lsrs	r3, r3, #10
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	004005ff 	.word	0x004005ff

08006a08 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a60:	b5b0      	push	{r4, r5, r7, lr}
 8006a62:	b090      	sub	sp, #64	; 0x40
 8006a64:	af04      	add	r7, sp, #16
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2203      	movs	r2, #3
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d02e      	beq.n	8006ade <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d106      	bne.n	8006a96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
 8006a94:	e029      	b.n	8006aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9c:	d10a      	bne.n	8006ab4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa3e 	bl	8006f20 <SD_WideBus_Enable>
 8006aa4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ab2:	e01a      	b.n	8006aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa7b 	bl	8006fb6 <SD_WideBus_Disable>
 8006ac0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ace:	e00c      	b.n	8006aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
 8006adc:	e005      	b.n	8006aea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a35      	ldr	r2, [pc, #212]	; (8006bcc <HAL_SD_ConfigWideBusOperation+0x16c>)
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b00:	e042      	b.n	8006b88 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006b02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b06:	f7fe f971 	bl	8004dec <HAL_RCCEx_GetPeriphCLKFreq>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d031      	beq.n	8006b76 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	3302      	adds	r3, #2
 8006b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3a:	4a25      	ldr	r2, [pc, #148]	; (8006bd0 <HAL_SD_ConfigWideBusOperation+0x170>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d907      	bls.n	8006b50 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	4a24      	ldr	r2, [pc, #144]	; (8006bd4 <HAL_SD_ConfigWideBusOperation+0x174>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	0ddb      	lsrs	r3, r3, #23
 8006b4a:	3b02      	subs	r3, #2
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	e002      	b.n	8006b56 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681d      	ldr	r5, [r3, #0]
 8006b5a:	466c      	mov	r4, sp
 8006b5c:	f107 0318 	add.w	r3, r7, #24
 8006b60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b68:	f107 030c 	add.w	r3, r7, #12
 8006b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f001 f897 	bl	8007ca2 <SDMMC_Init>
 8006b74:	e008      	b.n	8006b88 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f964 	bl	8007e5e <SDMMC_CmdBlockLength>
 8006b96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00c      	beq.n	8006bb8 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <HAL_SD_ConfigWideBusOperation+0x16c>)
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3730      	adds	r7, #48	; 0x30
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bdb0      	pop	{r4, r5, r7, pc}
 8006bcc:	004005ff 	.word	0x004005ff
 8006bd0:	017d7840 	.word	0x017d7840
 8006bd4:	55e63b89 	.word	0x55e63b89

08006bd8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006be4:	f107 030c 	add.w	r3, r7, #12
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f970 	bl	8006ed0 <SD_SendStatus>
 8006bf0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	0a5b      	lsrs	r3, r3, #9
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c0e:	693b      	ldr	r3, [r7, #16]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c18:	b5b0      	push	{r4, r5, r7, lr}
 8006c1a:	b094      	sub	sp, #80	; 0x50
 8006c1c:	af04      	add	r7, sp, #16
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c20:	2301      	movs	r3, #1
 8006c22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 f894 	bl	8007d56 <SDMMC_GetPowerState>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c38:	e0b8      	b.n	8006dac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d02f      	beq.n	8006ca2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fabe 	bl	80081c8 <SDMMC_CmdSendCID>
 8006c4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c56:	e0a9      	b.n	8006dac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f8be 	bl	8007de0 <SDMMC_GetResponse>
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2104      	movs	r1, #4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f8b5 	bl	8007de0 <SDMMC_GetResponse>
 8006c76:	4602      	mov	r2, r0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2108      	movs	r1, #8
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f8ac 	bl	8007de0 <SDMMC_GetResponse>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	210c      	movs	r1, #12
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 f8a3 	bl	8007de0 <SDMMC_GetResponse>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d00d      	beq.n	8006cc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f107 020e 	add.w	r2, r7, #14
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 fac4 	bl	8008242 <SDMMC_CmdSetRelAdd>
 8006cba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc4:	e072      	b.n	8006dac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d036      	beq.n	8006d3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006cce:	89fb      	ldrh	r3, [r7, #14]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f001 fa8e 	bl	8008204 <SDMMC_CmdSendCSD>
 8006ce8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	e05b      	b.n	8006dac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 f870 	bl	8007de0 <SDMMC_GetResponse>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 f867 	bl	8007de0 <SDMMC_GetResponse>
 8006d12:	4602      	mov	r2, r0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2108      	movs	r1, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 f85e 	bl	8007de0 <SDMMC_GetResponse>
 8006d24:	4602      	mov	r2, r0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	210c      	movs	r1, #12
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 f855 	bl	8007de0 <SDMMC_GetResponse>
 8006d36:	4602      	mov	r2, r0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2104      	movs	r1, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 f84c 	bl	8007de0 <SDMMC_GetResponse>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	0d1a      	lsrs	r2, r3, #20
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d50:	f107 0310 	add.w	r3, r7, #16
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fcb2 	bl	80066c0 <HAL_SD_GetCardCSD>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d66:	e021      	b.n	8006dac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	2200      	movs	r2, #0
 8006d74:	461c      	mov	r4, r3
 8006d76:	4615      	mov	r5, r2
 8006d78:	4622      	mov	r2, r4
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	f001 f93b 	bl	8007ff8 <SDMMC_CmdSelDesel>
 8006d82:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <SD_InitCard+0x176>
  {
    return errorstate;
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8c:	e00e      	b.n	8006dac <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681d      	ldr	r5, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	466c      	mov	r4, sp
 8006d96:	f103 0210 	add.w	r2, r3, #16
 8006d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006da0:	3304      	adds	r3, #4
 8006da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 ff7c 	bl	8007ca2 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3740      	adds	r7, #64	; 0x40
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bdb0      	pop	{r4, r5, r7, pc}

08006db4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f936 	bl	800803e <SDMMC_CmdGoIdleState>
 8006dd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <SD_PowerON+0x2a>
  {
    return errorstate;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	e072      	b.n	8006ec4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 f949 	bl	800807a <SDMMC_CmdOperCond>
 8006de8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00d      	beq.n	8006e0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f91f 	bl	800803e <SDMMC_CmdGoIdleState>
 8006e00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	e05b      	b.n	8006ec4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d137      	bne.n	8006e8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f949 	bl	80080b8 <SDMMC_CmdAppCommand>
 8006e26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d02d      	beq.n	8006e8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e32:	e047      	b.n	8006ec4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f93c 	bl	80080b8 <SDMMC_CmdAppCommand>
 8006e40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <SD_PowerON+0x98>
    {
      return errorstate;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	e03b      	b.n	8006ec4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	491e      	ldr	r1, [pc, #120]	; (8006ecc <SD_PowerON+0x118>)
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 f952 	bl	80080fc <SDMMC_CmdAppOperCommand>
 8006e58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e64:	e02e      	b.n	8006ec4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 ffb7 	bl	8007de0 <SDMMC_GetResponse>
 8006e72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	0fdb      	lsrs	r3, r3, #31
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <SD_PowerON+0xcc>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <SD_PowerON+0xce>
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]

    count++;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	3301      	adds	r3, #1
 8006e88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d802      	bhi.n	8006e9a <SD_PowerON+0xe6>
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0cc      	beq.n	8006e34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d902      	bls.n	8006eaa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea8:	e00c      	b.n	8006ec4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44
 8006eba:	e002      	b.n	8006ec2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	c1100000 	.word	0xc1100000

08006ed0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ee4:	e018      	b.n	8006f18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f001 f9c6 	bl	8008284 <SDMMC_CmdSendStatus>
 8006ef8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	e009      	b.n	8006f18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 ff68 	bl	8007de0 <SDMMC_GetResponse>
 8006f10:	4602      	mov	r2, r0
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 ff52 	bl	8007de0 <SDMMC_GetResponse>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f46:	d102      	bne.n	8006f4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f4c:	e02f      	b.n	8006fae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f4e:	f107 030c 	add.w	r3, r7, #12
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f879 	bl	800704c <SD_FindSCR>
 8006f5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	e023      	b.n	8006fae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01c      	beq.n	8006faa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f001 f89b 	bl	80080b8 <SDMMC_CmdAppCommand>
 8006f82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	e00f      	b.n	8006fae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2102      	movs	r1, #2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 f8d4 	bl	8008142 <SDMMC_CmdBusWidth>
 8006f9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	e003      	b.n	8006fae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e001      	b.n	8006fae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006faa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 ff07 	bl	8007de0 <SDMMC_GetResponse>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fdc:	d102      	bne.n	8006fe4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fe2:	e02f      	b.n	8007044 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fe4:	f107 030c 	add.w	r3, r7, #12
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f82e 	bl	800704c <SD_FindSCR>
 8006ff0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	e023      	b.n	8007044 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01c      	beq.n	8007040 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f001 f850 	bl	80080b8 <SDMMC_CmdAppCommand>
 8007018:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	e00f      	b.n	8007044 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f889 	bl	8008142 <SDMMC_CmdBusWidth>
 8007030:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	e003      	b.n	8007044 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800703c:	2300      	movs	r3, #0
 800703e:	e001      	b.n	8007044 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007040:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b08f      	sub	sp, #60	; 0x3c
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007056:	f7fa f9a1 	bl	800139c <HAL_GetTick>
 800705a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007060:	2300      	movs	r3, #0
 8007062:	60bb      	str	r3, [r7, #8]
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2108      	movs	r1, #8
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fef3 	bl	8007e5e <SDMMC_CmdBlockLength>
 8007078:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	e0a9      	b.n	80071d8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f001 f811 	bl	80080b8 <SDMMC_CmdAppCommand>
 8007096:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	e09a      	b.n	80071d8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80070a8:	2308      	movs	r3, #8
 80070aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80070ac:	2330      	movs	r3, #48	; 0x30
 80070ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070b0:	2302      	movs	r3, #2
 80070b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f107 0210 	add.w	r2, r7, #16
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fe9d 	bl	8007e06 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f858 	bl	8008186 <SDMMC_CmdSendSCR>
 80070d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d022      	beq.n	8007124 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	e07a      	b.n	80071d8 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00e      	beq.n	800710e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	f107 0208 	add.w	r2, r7, #8
 80070fc:	18d4      	adds	r4, r2, r3
 80070fe:	4608      	mov	r0, r1
 8007100:	f000 fdfc 	bl	8007cfc <SDMMC_ReadFIFO>
 8007104:	4603      	mov	r3, r0
 8007106:	6023      	str	r3, [r4, #0]
      index++;
 8007108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710a:	3301      	adds	r3, #1
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800710e:	f7fa f945 	bl	800139c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d102      	bne.n	8007124 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800711e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007122:	e059      	b.n	80071d8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712a:	f240 432a 	movw	r3, #1066	; 0x42a
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0d6      	beq.n	80070e2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2208      	movs	r2, #8
 8007148:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800714a:	2308      	movs	r3, #8
 800714c:	e044      	b.n	80071d8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2202      	movs	r2, #2
 8007162:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007164:	2302      	movs	r3, #2
 8007166:	e037      	b.n	80071d8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2220      	movs	r2, #32
 800717c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800717e:	2320      	movs	r3, #32
 8007180:	e02a      	b.n	80071d8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f240 523a 	movw	r2, #1338	; 0x53a
 800718a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	061a      	lsls	r2, r3, #24
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007198:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0e1b      	lsrs	r3, r3, #24
 80071a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	601a      	str	r2, [r3, #0]
    scr++;
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	3304      	adds	r3, #4
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	061a      	lsls	r2, r3, #24
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	0a1b      	lsrs	r3, r3, #8
 80071c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	0e1b      	lsrs	r3, r3, #24
 80071d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	373c      	adds	r7, #60	; 0x3c
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd90      	pop	{r4, r7, pc}

080071e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e095      	b.n	800731e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d108      	bne.n	800720c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007202:	d009      	beq.n	8007218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	61da      	str	r2, [r3, #28]
 800720a:	e005      	b.n	8007218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7f9 fefc 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800724e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007258:	d902      	bls.n	8007260 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e002      	b.n	8007266 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007264:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800726e:	d007      	beq.n	8007280 <HAL_SPI_Init+0xa0>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007278:	d002      	beq.n	8007280 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	ea42 0103 	orr.w	r1, r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	f003 0204 	and.w	r2, r3, #4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80072fc:	ea42 0103 	orr.w	r1, r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e048      	b.n	80073ca <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7f9 fdb1 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2224      	movs	r2, #36	; 0x24
 8007352:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0201 	bic.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f835 	bl	80073d4 <UART_SetConfig>
 800736a:	4603      	mov	r3, r0
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e02a      	b.n	80073ca <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fae1 	bl	8007944 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007390:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80073a0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0208 	orr.w	r2, r2, #8
 80073b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0201 	orr.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb60 	bl	8007a88 <UART_CheckIdleState>
 80073c8:	4603      	mov	r3, r0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d8:	b08a      	sub	sp, #40	; 0x28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4ba4      	ldr	r3, [pc, #656]	; (8007694 <UART_SetConfig+0x2c0>)
 8007404:	4013      	ands	r3, r2
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800740c:	430b      	orrs	r3, r1
 800740e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a99      	ldr	r2, [pc, #612]	; (8007698 <UART_SetConfig+0x2c4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d004      	beq.n	8007440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	4313      	orrs	r3, r2
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007450:	430a      	orrs	r2, r1
 8007452:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a90      	ldr	r2, [pc, #576]	; (800769c <UART_SetConfig+0x2c8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d126      	bne.n	80074ac <UART_SetConfig+0xd8>
 800745e:	4b90      	ldr	r3, [pc, #576]	; (80076a0 <UART_SetConfig+0x2cc>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	2b03      	cmp	r3, #3
 800746a:	d81b      	bhi.n	80074a4 <UART_SetConfig+0xd0>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0xa0>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007485 	.word	0x08007485
 8007478:	08007495 	.word	0x08007495
 800747c:	0800748d 	.word	0x0800748d
 8007480:	0800749d 	.word	0x0800749d
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800748a:	e116      	b.n	80076ba <UART_SetConfig+0x2e6>
 800748c:	2302      	movs	r3, #2
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007492:	e112      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007494:	2304      	movs	r3, #4
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749a:	e10e      	b.n	80076ba <UART_SetConfig+0x2e6>
 800749c:	2308      	movs	r3, #8
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a2:	e10a      	b.n	80076ba <UART_SetConfig+0x2e6>
 80074a4:	2310      	movs	r3, #16
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e106      	b.n	80076ba <UART_SetConfig+0x2e6>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a7c      	ldr	r2, [pc, #496]	; (80076a4 <UART_SetConfig+0x2d0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d138      	bne.n	8007528 <UART_SetConfig+0x154>
 80074b6:	4b7a      	ldr	r3, [pc, #488]	; (80076a0 <UART_SetConfig+0x2cc>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074bc:	f003 030c 	and.w	r3, r3, #12
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	d82d      	bhi.n	8007520 <UART_SetConfig+0x14c>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <UART_SetConfig+0xf8>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	08007501 	.word	0x08007501
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007521 	.word	0x08007521
 80074d8:	08007521 	.word	0x08007521
 80074dc:	08007511 	.word	0x08007511
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007521 	.word	0x08007521
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007509 	.word	0x08007509
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007521 	.word	0x08007521
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007519 	.word	0x08007519
 8007500:	2300      	movs	r3, #0
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007506:	e0d8      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007508:	2302      	movs	r3, #2
 800750a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750e:	e0d4      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007510:	2304      	movs	r3, #4
 8007512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007516:	e0d0      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751e:	e0cc      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007520:	2310      	movs	r3, #16
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007526:	e0c8      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a5e      	ldr	r2, [pc, #376]	; (80076a8 <UART_SetConfig+0x2d4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d125      	bne.n	800757e <UART_SetConfig+0x1aa>
 8007532:	4b5b      	ldr	r3, [pc, #364]	; (80076a0 <UART_SetConfig+0x2cc>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800753c:	2b30      	cmp	r3, #48	; 0x30
 800753e:	d016      	beq.n	800756e <UART_SetConfig+0x19a>
 8007540:	2b30      	cmp	r3, #48	; 0x30
 8007542:	d818      	bhi.n	8007576 <UART_SetConfig+0x1a2>
 8007544:	2b20      	cmp	r3, #32
 8007546:	d00a      	beq.n	800755e <UART_SetConfig+0x18a>
 8007548:	2b20      	cmp	r3, #32
 800754a:	d814      	bhi.n	8007576 <UART_SetConfig+0x1a2>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <UART_SetConfig+0x182>
 8007550:	2b10      	cmp	r3, #16
 8007552:	d008      	beq.n	8007566 <UART_SetConfig+0x192>
 8007554:	e00f      	b.n	8007576 <UART_SetConfig+0x1a2>
 8007556:	2300      	movs	r3, #0
 8007558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755c:	e0ad      	b.n	80076ba <UART_SetConfig+0x2e6>
 800755e:	2302      	movs	r3, #2
 8007560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007564:	e0a9      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007566:	2304      	movs	r3, #4
 8007568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756c:	e0a5      	b.n	80076ba <UART_SetConfig+0x2e6>
 800756e:	2308      	movs	r3, #8
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007574:	e0a1      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007576:	2310      	movs	r3, #16
 8007578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757c:	e09d      	b.n	80076ba <UART_SetConfig+0x2e6>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a4a      	ldr	r2, [pc, #296]	; (80076ac <UART_SetConfig+0x2d8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d125      	bne.n	80075d4 <UART_SetConfig+0x200>
 8007588:	4b45      	ldr	r3, [pc, #276]	; (80076a0 <UART_SetConfig+0x2cc>)
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007592:	2bc0      	cmp	r3, #192	; 0xc0
 8007594:	d016      	beq.n	80075c4 <UART_SetConfig+0x1f0>
 8007596:	2bc0      	cmp	r3, #192	; 0xc0
 8007598:	d818      	bhi.n	80075cc <UART_SetConfig+0x1f8>
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d00a      	beq.n	80075b4 <UART_SetConfig+0x1e0>
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d814      	bhi.n	80075cc <UART_SetConfig+0x1f8>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <UART_SetConfig+0x1d8>
 80075a6:	2b40      	cmp	r3, #64	; 0x40
 80075a8:	d008      	beq.n	80075bc <UART_SetConfig+0x1e8>
 80075aa:	e00f      	b.n	80075cc <UART_SetConfig+0x1f8>
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b2:	e082      	b.n	80076ba <UART_SetConfig+0x2e6>
 80075b4:	2302      	movs	r3, #2
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ba:	e07e      	b.n	80076ba <UART_SetConfig+0x2e6>
 80075bc:	2304      	movs	r3, #4
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c2:	e07a      	b.n	80076ba <UART_SetConfig+0x2e6>
 80075c4:	2308      	movs	r3, #8
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ca:	e076      	b.n	80076ba <UART_SetConfig+0x2e6>
 80075cc:	2310      	movs	r3, #16
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d2:	e072      	b.n	80076ba <UART_SetConfig+0x2e6>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a35      	ldr	r2, [pc, #212]	; (80076b0 <UART_SetConfig+0x2dc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d12a      	bne.n	8007634 <UART_SetConfig+0x260>
 80075de:	4b30      	ldr	r3, [pc, #192]	; (80076a0 <UART_SetConfig+0x2cc>)
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ec:	d01a      	beq.n	8007624 <UART_SetConfig+0x250>
 80075ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f2:	d81b      	bhi.n	800762c <UART_SetConfig+0x258>
 80075f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f8:	d00c      	beq.n	8007614 <UART_SetConfig+0x240>
 80075fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fe:	d815      	bhi.n	800762c <UART_SetConfig+0x258>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <UART_SetConfig+0x238>
 8007604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007608:	d008      	beq.n	800761c <UART_SetConfig+0x248>
 800760a:	e00f      	b.n	800762c <UART_SetConfig+0x258>
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007612:	e052      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007614:	2302      	movs	r3, #2
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761a:	e04e      	b.n	80076ba <UART_SetConfig+0x2e6>
 800761c:	2304      	movs	r3, #4
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007622:	e04a      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007624:	2308      	movs	r3, #8
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762a:	e046      	b.n	80076ba <UART_SetConfig+0x2e6>
 800762c:	2310      	movs	r3, #16
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007632:	e042      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a17      	ldr	r2, [pc, #92]	; (8007698 <UART_SetConfig+0x2c4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d13a      	bne.n	80076b4 <UART_SetConfig+0x2e0>
 800763e:	4b18      	ldr	r3, [pc, #96]	; (80076a0 <UART_SetConfig+0x2cc>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764c:	d01a      	beq.n	8007684 <UART_SetConfig+0x2b0>
 800764e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007652:	d81b      	bhi.n	800768c <UART_SetConfig+0x2b8>
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007658:	d00c      	beq.n	8007674 <UART_SetConfig+0x2a0>
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765e:	d815      	bhi.n	800768c <UART_SetConfig+0x2b8>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <UART_SetConfig+0x298>
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007668:	d008      	beq.n	800767c <UART_SetConfig+0x2a8>
 800766a:	e00f      	b.n	800768c <UART_SetConfig+0x2b8>
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007672:	e022      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007674:	2302      	movs	r3, #2
 8007676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800767a:	e01e      	b.n	80076ba <UART_SetConfig+0x2e6>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007682:	e01a      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768a:	e016      	b.n	80076ba <UART_SetConfig+0x2e6>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007692:	e012      	b.n	80076ba <UART_SetConfig+0x2e6>
 8007694:	efff69f3 	.word	0xefff69f3
 8007698:	40008000 	.word	0x40008000
 800769c:	40013800 	.word	0x40013800
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40004400 	.word	0x40004400
 80076a8:	40004800 	.word	0x40004800
 80076ac:	40004c00 	.word	0x40004c00
 80076b0:	40005000 	.word	0x40005000
 80076b4:	2310      	movs	r3, #16
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a9f      	ldr	r2, [pc, #636]	; (800793c <UART_SetConfig+0x568>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d17a      	bne.n	80077ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d824      	bhi.n	8007716 <UART_SetConfig+0x342>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0x300>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007717 	.word	0x08007717
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007717 	.word	0x08007717
 80076e4:	08007707 	.word	0x08007707
 80076e8:	08007717 	.word	0x08007717
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007717 	.word	0x08007717
 80076f4:	0800770f 	.word	0x0800770f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f8:	f7fd f802 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80076fc:	61f8      	str	r0, [r7, #28]
        break;
 80076fe:	e010      	b.n	8007722 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007700:	4b8f      	ldr	r3, [pc, #572]	; (8007940 <UART_SetConfig+0x56c>)
 8007702:	61fb      	str	r3, [r7, #28]
        break;
 8007704:	e00d      	b.n	8007722 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007706:	f7fc ff63 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800770a:	61f8      	str	r0, [r7, #28]
        break;
 800770c:	e009      	b.n	8007722 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007712:	61fb      	str	r3, [r7, #28]
        break;
 8007714:	e005      	b.n	8007722 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80fb 	beq.w	8007920 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4413      	add	r3, r2
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	429a      	cmp	r2, r3
 8007738:	d305      	bcc.n	8007746 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	429a      	cmp	r2, r3
 8007744:	d903      	bls.n	800774e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800774c:	e0e8      	b.n	8007920 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	2200      	movs	r2, #0
 8007752:	461c      	mov	r4, r3
 8007754:	4615      	mov	r5, r2
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	f04f 0300 	mov.w	r3, #0
 800775e:	022b      	lsls	r3, r5, #8
 8007760:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007764:	0222      	lsls	r2, r4, #8
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	6849      	ldr	r1, [r1, #4]
 800776a:	0849      	lsrs	r1, r1, #1
 800776c:	2000      	movs	r0, #0
 800776e:	4688      	mov	r8, r1
 8007770:	4681      	mov	r9, r0
 8007772:	eb12 0a08 	adds.w	sl, r2, r8
 8007776:	eb43 0b09 	adc.w	fp, r3, r9
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	603b      	str	r3, [r7, #0]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007788:	4650      	mov	r0, sl
 800778a:	4659      	mov	r1, fp
 800778c:	f7f8 fd1c 	bl	80001c8 <__aeabi_uldivmod>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4613      	mov	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779e:	d308      	bcc.n	80077b2 <UART_SetConfig+0x3de>
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a6:	d204      	bcs.n	80077b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	e0b6      	b.n	8007920 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077b8:	e0b2      	b.n	8007920 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c2:	d15e      	bne.n	8007882 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80077c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d828      	bhi.n	800781e <UART_SetConfig+0x44a>
 80077cc:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <UART_SetConfig+0x400>)
 80077ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d2:	bf00      	nop
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	08007801 	.word	0x08007801
 80077dc:	08007809 	.word	0x08007809
 80077e0:	0800781f 	.word	0x0800781f
 80077e4:	0800780f 	.word	0x0800780f
 80077e8:	0800781f 	.word	0x0800781f
 80077ec:	0800781f 	.word	0x0800781f
 80077f0:	0800781f 	.word	0x0800781f
 80077f4:	08007817 	.word	0x08007817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f8:	f7fc ff82 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80077fc:	61f8      	str	r0, [r7, #28]
        break;
 80077fe:	e014      	b.n	800782a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007800:	f7fc ff94 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8007804:	61f8      	str	r0, [r7, #28]
        break;
 8007806:	e010      	b.n	800782a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007808:	4b4d      	ldr	r3, [pc, #308]	; (8007940 <UART_SetConfig+0x56c>)
 800780a:	61fb      	str	r3, [r7, #28]
        break;
 800780c:	e00d      	b.n	800782a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780e:	f7fc fedf 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8007812:	61f8      	str	r0, [r7, #28]
        break;
 8007814:	e009      	b.n	800782a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781a:	61fb      	str	r3, [r7, #28]
        break;
 800781c:	e005      	b.n	800782a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d077      	beq.n	8007920 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005a      	lsls	r2, r3, #1
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	441a      	add	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	fbb2 f3f3 	udiv	r3, r2, r3
 8007844:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b0f      	cmp	r3, #15
 800784a:	d916      	bls.n	800787a <UART_SetConfig+0x4a6>
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007852:	d212      	bcs.n	800787a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f023 030f 	bic.w	r3, r3, #15
 800785c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	b29b      	uxth	r3, r3
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	b29a      	uxth	r2, r3
 800786a:	8afb      	ldrh	r3, [r7, #22]
 800786c:	4313      	orrs	r3, r2
 800786e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	8afa      	ldrh	r2, [r7, #22]
 8007876:	60da      	str	r2, [r3, #12]
 8007878:	e052      	b.n	8007920 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007880:	e04e      	b.n	8007920 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007886:	2b08      	cmp	r3, #8
 8007888:	d827      	bhi.n	80078da <UART_SetConfig+0x506>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <UART_SetConfig+0x4bc>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	080078db 	.word	0x080078db
 80078a0:	080078cb 	.word	0x080078cb
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078db 	.word	0x080078db
 80078ac:	080078db 	.word	0x080078db
 80078b0:	080078d3 	.word	0x080078d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b4:	f7fc ff24 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 80078b8:	61f8      	str	r0, [r7, #28]
        break;
 80078ba:	e014      	b.n	80078e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7fc ff36 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 80078c0:	61f8      	str	r0, [r7, #28]
        break;
 80078c2:	e010      	b.n	80078e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c4:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <UART_SetConfig+0x56c>)
 80078c6:	61fb      	str	r3, [r7, #28]
        break;
 80078c8:	e00d      	b.n	80078e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ca:	f7fc fe81 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80078ce:	61f8      	str	r0, [r7, #28]
        break;
 80078d0:	e009      	b.n	80078e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d6:	61fb      	str	r3, [r7, #28]
        break;
 80078d8:	e005      	b.n	80078e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078e4:	bf00      	nop
    }

    if (pclk != 0U)
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d019      	beq.n	8007920 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	085a      	lsrs	r2, r3, #1
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b0f      	cmp	r3, #15
 8007904:	d909      	bls.n	800791a <UART_SetConfig+0x546>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800790c:	d205      	bcs.n	800791a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60da      	str	r2, [r3, #12]
 8007918:	e002      	b.n	8007920 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800792c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007930:	4618      	mov	r0, r3
 8007932:	3728      	adds	r7, #40	; 0x28
 8007934:	46bd      	mov	sp, r7
 8007936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800793a:	bf00      	nop
 800793c:	40008000 	.word	0x40008000
 8007940:	00f42400 	.word	0x00f42400

08007944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00a      	beq.n	80079b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00a      	beq.n	80079f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01a      	beq.n	8007a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a42:	d10a      	bne.n	8007a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	605a      	str	r2, [r3, #4]
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a98:	f7f9 fc80 	bl	800139c <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d10e      	bne.n	8007aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f82d 	bl	8007b1a <UART_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e023      	b.n	8007b12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d10e      	bne.n	8007af6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f817 	bl	8007b1a <UART_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e00d      	b.n	8007b12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b09c      	sub	sp, #112	; 0x70
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	4613      	mov	r3, r2
 8007b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2a:	e0a5      	b.n	8007c78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	f000 80a1 	beq.w	8007c78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b36:	f7f9 fc31 	bl	800139c <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d302      	bcc.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x32>
 8007b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d13e      	bne.n	8007bca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b60:	667b      	str	r3, [r7, #100]	; 0x64
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e6      	bne.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	663b      	str	r3, [r7, #96]	; 0x60
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ba0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e5      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e067      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d04f      	beq.n	8007c78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be6:	d147      	bne.n	8007c78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bf0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
 8007c12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	613b      	str	r3, [r7, #16]
   return(result);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3308      	adds	r3, #8
 8007c42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c44:	623a      	str	r2, [r7, #32]
 8007c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69f9      	ldr	r1, [r7, #28]
 8007c4a:	6a3a      	ldr	r2, [r7, #32]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e5      	bne.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2220      	movs	r2, #32
 8007c62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e010      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	69da      	ldr	r2, [r3, #28]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4013      	ands	r3, r2
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	f43f af4a 	beq.w	8007b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3770      	adds	r7, #112	; 0x70
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	f107 001c 	add.w	r0, r7, #28
 8007cb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007cc0:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007cc4:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007cc8:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ccc:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007cd0:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	b004      	add	sp, #16
 8007cfa:	4770      	bx	lr

08007cfc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2203      	movs	r2, #3
 8007d44:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007d46:	2002      	movs	r0, #2
 8007d48:	f7f9 fb34 	bl	80013b4 <HAL_Delay>

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0303 	and.w	r3, r3, #3
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d90:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007d96:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007d9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007dac:	f023 030f 	bic.w	r3, r3, #15
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	b2db      	uxtb	r3, r3
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3314      	adds	r3, #20
 8007dee:	461a      	mov	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	4413      	add	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e2c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e32:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0

}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b088      	sub	sp, #32
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e7e:	f107 0308 	add.w	r3, r7, #8
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff74 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8e:	2110      	movs	r1, #16
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa19 	bl	80082c8 <SDMMC_GetCmdResp1>
 8007e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e98:	69fb      	ldr	r3, [r7, #28]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007eb0:	2311      	movs	r3, #17
 8007eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ff52 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed2:	2111      	movs	r1, #17
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9f7 	bl	80082c8 <SDMMC_GetCmdResp1>
 8007eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007edc:	69fb      	ldr	r3, [r7, #28]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b088      	sub	sp, #32
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007ef4:	2312      	movs	r3, #18
 8007ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ef8:	2340      	movs	r3, #64	; 0x40
 8007efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f06:	f107 0308 	add.w	r3, r7, #8
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ff30 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	2112      	movs	r1, #18
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9d5 	bl	80082c8 <SDMMC_GetCmdResp1>
 8007f1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f20:	69fb      	ldr	r3, [r7, #28]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b088      	sub	sp, #32
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f38:	2318      	movs	r3, #24
 8007f3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff ff0e 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f5a:	2118      	movs	r1, #24
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9b3 	bl	80082c8 <SDMMC_GetCmdResp1>
 8007f62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f64:	69fb      	ldr	r3, [r7, #28]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3720      	adds	r7, #32
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b088      	sub	sp, #32
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f7c:	2319      	movs	r3, #25
 8007f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f8e:	f107 0308 	add.w	r3, r7, #8
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff feec 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9e:	2119      	movs	r1, #25
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f991 	bl	80082c8 <SDMMC_GetCmdResp1>
 8007fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fc4:	2340      	movs	r3, #64	; 0x40
 8007fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd0:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff feca 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007fde:	4a05      	ldr	r2, [pc, #20]	; (8007ff4 <SDMMC_CmdStopTransfer+0x40>)
 8007fe0:	210c      	movs	r1, #12
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f970 	bl	80082c8 <SDMMC_GetCmdResp1>
 8007fe8:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8007fea:	69fb      	ldr	r3, [r7, #28]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	05f5e100 	.word	0x05f5e100

08007ff8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	; 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008008:	2307      	movs	r3, #7
 800800a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008010:	2300      	movs	r3, #0
 8008012:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008018:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800801a:	f107 0310 	add.w	r3, r7, #16
 800801e:	4619      	mov	r1, r3
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff fea6 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008026:	f241 3288 	movw	r2, #5000	; 0x1388
 800802a:	2107      	movs	r1, #7
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f94b 	bl	80082c8 <SDMMC_GetCmdResp1>
 8008032:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008036:	4618      	mov	r0, r3
 8008038:	3728      	adds	r7, #40	; 0x28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b088      	sub	sp, #32
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fe85 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb65 	bl	8008738 <SDMMC_GetCmdError>
 800806e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008070:	69fb      	ldr	r3, [r7, #28]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b088      	sub	sp, #32
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008082:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008088:	2308      	movs	r3, #8
 800808a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800808c:	2340      	movs	r3, #64	; 0x40
 800808e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800809a:	f107 0308 	add.w	r3, r7, #8
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fe66 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 faf8 	bl	800869c <SDMMC_GetCmdResp7>
 80080ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ae:	69fb      	ldr	r3, [r7, #28]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80080c6:	2337      	movs	r3, #55	; 0x37
 80080c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080ca:	2340      	movs	r3, #64	; 0x40
 80080cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080d8:	f107 0308 	add.w	r3, r7, #8
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fe47 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80080e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e8:	2137      	movs	r1, #55	; 0x37
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f8ec 	bl	80082c8 <SDMMC_GetCmdResp1>
 80080f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080f2:	69fb      	ldr	r3, [r7, #28]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800810c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008110:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008112:	2329      	movs	r3, #41	; 0x29
 8008114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800811e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008124:	f107 0308 	add.w	r3, r7, #8
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff fe21 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9ff 	bl	8008534 <SDMMC_GetCmdResp3>
 8008136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008138:	69fb      	ldr	r3, [r7, #28]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3720      	adds	r7, #32
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b088      	sub	sp, #32
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008150:	2306      	movs	r3, #6
 8008152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008154:	2340      	movs	r3, #64	; 0x40
 8008156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800815c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008160:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008162:	f107 0308 	add.w	r3, r7, #8
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff fe02 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800816e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008172:	2106      	movs	r1, #6
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8a7 	bl	80082c8 <SDMMC_GetCmdResp1>
 800817a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800817c:	69fb      	ldr	r3, [r7, #28]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b088      	sub	sp, #32
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008192:	2333      	movs	r3, #51	; 0x33
 8008194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008196:	2340      	movs	r3, #64	; 0x40
 8008198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800819a:	2300      	movs	r3, #0
 800819c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800819e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff fde1 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80081b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b4:	2133      	movs	r1, #51	; 0x33
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f886 	bl	80082c8 <SDMMC_GetCmdResp1>
 80081bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081be:	69fb      	ldr	r3, [r7, #28]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80081d4:	2302      	movs	r3, #2
 80081d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80081d8:	23c0      	movs	r3, #192	; 0xc0
 80081da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081e6:	f107 0308 	add.w	r3, r7, #8
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fdc0 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f956 	bl	80084a4 <SDMMC_GetCmdResp2>
 80081f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081fa:	69fb      	ldr	r3, [r7, #28]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3720      	adds	r7, #32
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008212:	2309      	movs	r3, #9
 8008214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008216:	23c0      	movs	r3, #192	; 0xc0
 8008218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800821e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008224:	f107 0308 	add.w	r3, r7, #8
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fda1 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f937 	bl	80084a4 <SDMMC_GetCmdResp2>
 8008236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008238:	69fb      	ldr	r3, [r7, #28]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b088      	sub	sp, #32
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008250:	2303      	movs	r3, #3
 8008252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800825c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff fd82 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	2103      	movs	r1, #3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f99c 	bl	80085b0 <SDMMC_GetCmdResp6>
 8008278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008292:	230d      	movs	r3, #13
 8008294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a4:	f107 0308 	add.w	r3, r7, #8
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fd61 	bl	8007d72 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80082b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b4:	210d      	movs	r1, #13
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f806 	bl	80082c8 <SDMMC_GetCmdResp1>
 80082bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082be:	69fb      	ldr	r3, [r7, #28]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	460b      	mov	r3, r1
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80082d6:	4b70      	ldr	r3, [pc, #448]	; (8008498 <SDMMC_GetCmdResp1+0x1d0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a70      	ldr	r2, [pc, #448]	; (800849c <SDMMC_GetCmdResp1+0x1d4>)
 80082dc:	fba2 2303 	umull	r2, r3, r2, r3
 80082e0:	0a5a      	lsrs	r2, r3, #9
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	fb02 f303 	mul.w	r3, r2, r3
 80082e8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	1e5a      	subs	r2, r3, #1
 80082ee:	61fa      	str	r2, [r7, #28]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082f8:	e0c9      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0ef      	beq.n	80082ea <SDMMC_GetCmdResp1+0x22>
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1ea      	bne.n	80082ea <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2204      	movs	r2, #4
 8008324:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008326:	2304      	movs	r3, #4
 8008328:	e0b1      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800833c:	2301      	movs	r3, #1
 800833e:	e0a6      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	22c5      	movs	r2, #197	; 0xc5
 8008344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fd3d 	bl	8007dc6 <SDMMC_GetCommandResponse>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	4293      	cmp	r3, r2
 8008354:	d001      	beq.n	800835a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008356:	2301      	movs	r3, #1
 8008358:	e099      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800835a:	2100      	movs	r1, #0
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fd3f 	bl	8007de0 <SDMMC_GetResponse>
 8008362:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	4b4e      	ldr	r3, [pc, #312]	; (80084a0 <SDMMC_GetCmdResp1+0x1d8>)
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800836e:	2300      	movs	r3, #0
 8008370:	e08d      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	da02      	bge.n	800837e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800837c:	e087      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008388:	2340      	movs	r3, #64	; 0x40
 800838a:	e080      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008396:	2380      	movs	r3, #128	; 0x80
 8008398:	e079      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80083a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a8:	e071      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80083b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b8:	e069      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80083c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c8:	e061      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80083d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083d8:	e059      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80083e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e8:	e051      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083f8:	e049      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008408:	e041      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008418:	e039      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008428:	e031      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008438:	e029      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008444:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008448:	e021      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008454:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008458:	e019      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008464:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008468:	e011      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008474:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008478:	e009      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008484:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008488:	e001      	b.n	800848e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800848a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800848e:	4618      	mov	r0, r3
 8008490:	3720      	adds	r7, #32
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000000 	.word	0x20000000
 800849c:	10624dd3 	.word	0x10624dd3
 80084a0:	fdffe008 	.word	0xfdffe008

080084a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084ac:	4b1f      	ldr	r3, [pc, #124]	; (800852c <SDMMC_GetCmdResp2+0x88>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <SDMMC_GetCmdResp2+0x8c>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	0a5b      	lsrs	r3, r3, #9
 80084b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1e5a      	subs	r2, r3, #1
 80084c6:	60fa      	str	r2, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084d0:	e026      	b.n	8008520 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0ef      	beq.n	80084c2 <SDMMC_GetCmdResp2+0x1e>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1ea      	bne.n	80084c2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2204      	movs	r2, #4
 80084fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084fe:	2304      	movs	r3, #4
 8008500:	e00e      	b.n	8008520 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008514:	2301      	movs	r3, #1
 8008516:	e003      	b.n	8008520 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	22c5      	movs	r2, #197	; 0xc5
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20000000 	.word	0x20000000
 8008530:	10624dd3 	.word	0x10624dd3

08008534 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <SDMMC_GetCmdResp3+0x74>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1a      	ldr	r2, [pc, #104]	; (80085ac <SDMMC_GetCmdResp3+0x78>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	0a5b      	lsrs	r3, r3, #9
 8008548:	f241 3288 	movw	r2, #5000	; 0x1388
 800854c:	fb02 f303 	mul.w	r3, r2, r3
 8008550:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1e5a      	subs	r2, r3, #1
 8008556:	60fa      	str	r2, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800855c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008560:	e01b      	b.n	800859a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0ef      	beq.n	8008552 <SDMMC_GetCmdResp3+0x1e>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1ea      	bne.n	8008552 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2204      	movs	r2, #4
 800858c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800858e:	2304      	movs	r3, #4
 8008590:	e003      	b.n	800859a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	22c5      	movs	r2, #197	; 0xc5
 8008596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20000000 	.word	0x20000000
 80085ac:	10624dd3 	.word	0x10624dd3

080085b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	460b      	mov	r3, r1
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085be:	4b35      	ldr	r3, [pc, #212]	; (8008694 <SDMMC_GetCmdResp6+0xe4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a35      	ldr	r2, [pc, #212]	; (8008698 <SDMMC_GetCmdResp6+0xe8>)
 80085c4:	fba2 2303 	umull	r2, r3, r2, r3
 80085c8:	0a5b      	lsrs	r3, r3, #9
 80085ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ce:	fb02 f303 	mul.w	r3, r2, r3
 80085d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	1e5a      	subs	r2, r3, #1
 80085d8:	61fa      	str	r2, [r7, #28]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085e2:	e052      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0ef      	beq.n	80085d4 <SDMMC_GetCmdResp6+0x24>
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1ea      	bne.n	80085d4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2204      	movs	r2, #4
 800860e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008610:	2304      	movs	r3, #4
 8008612:	e03a      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008626:	2301      	movs	r3, #1
 8008628:	e02f      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fbcb 	bl	8007dc6 <SDMMC_GetCommandResponse>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	4293      	cmp	r3, r2
 8008638:	d001      	beq.n	800863e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800863a:	2301      	movs	r3, #1
 800863c:	e025      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	22c5      	movs	r2, #197	; 0xc5
 8008642:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008644:	2100      	movs	r1, #0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff fbca 	bl	8007de0 <SDMMC_GetResponse>
 800864c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	b29a      	uxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008662:	2300      	movs	r3, #0
 8008664:	e011      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008674:	e009      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008684:	e001      	b.n	800868a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3720      	adds	r7, #32
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20000000 	.word	0x20000000
 8008698:	10624dd3 	.word	0x10624dd3

0800869c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086a4:	4b22      	ldr	r3, [pc, #136]	; (8008730 <SDMMC_GetCmdResp7+0x94>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a22      	ldr	r2, [pc, #136]	; (8008734 <SDMMC_GetCmdResp7+0x98>)
 80086aa:	fba2 2303 	umull	r2, r3, r2, r3
 80086ae:	0a5b      	lsrs	r3, r3, #9
 80086b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b4:	fb02 f303 	mul.w	r3, r2, r3
 80086b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1e5a      	subs	r2, r3, #1
 80086be:	60fa      	str	r2, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086c8:	e02c      	b.n	8008724 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0ef      	beq.n	80086ba <SDMMC_GetCmdResp7+0x1e>
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1ea      	bne.n	80086ba <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2204      	movs	r2, #4
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086f6:	2304      	movs	r3, #4
 80086f8:	e014      	b.n	8008724 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800870c:	2301      	movs	r3, #1
 800870e:	e009      	b.n	8008724 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2240      	movs	r2, #64	; 0x40
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008722:	2300      	movs	r3, #0

}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	20000000 	.word	0x20000000
 8008734:	10624dd3 	.word	0x10624dd3

08008738 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008740:	4b11      	ldr	r3, [pc, #68]	; (8008788 <SDMMC_GetCmdError+0x50>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a11      	ldr	r2, [pc, #68]	; (800878c <SDMMC_GetCmdError+0x54>)
 8008746:	fba2 2303 	umull	r2, r3, r2, r3
 800874a:	0a5b      	lsrs	r3, r3, #9
 800874c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008750:	fb02 f303 	mul.w	r3, r2, r3
 8008754:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	60fa      	str	r2, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008764:	e009      	b.n	800877a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f1      	beq.n	8008756 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	22c5      	movs	r2, #197	; 0xc5
 8008776:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	20000000 	.word	0x20000000
 800878c:	10624dd3 	.word	0x10624dd3

08008790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008790:	b084      	sub	sp, #16
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	f107 001c 	add.w	r0, r7, #28
 800879e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa70 	bl	8008c94 <USB_CoreReset>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80087b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
 80087ca:	e005      	b.n	80087d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087e4:	b004      	add	sp, #16
 80087e6:	4770      	bx	lr

080087e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f023 0201 	bic.w	r2, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d115      	bne.n	8008858 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008838:	2001      	movs	r0, #1
 800883a:	f7f8 fdbb 	bl	80013b4 <HAL_Delay>
      ms++;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fa17 	bl	8008c78 <USB_GetMode>
 800884a:	4603      	mov	r3, r0
 800884c:	2b01      	cmp	r3, #1
 800884e:	d01e      	beq.n	800888e <USB_SetCurrentMode+0x84>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b31      	cmp	r3, #49	; 0x31
 8008854:	d9f0      	bls.n	8008838 <USB_SetCurrentMode+0x2e>
 8008856:	e01a      	b.n	800888e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d115      	bne.n	800888a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800886a:	2001      	movs	r0, #1
 800886c:	f7f8 fda2 	bl	80013b4 <HAL_Delay>
      ms++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f9fe 	bl	8008c78 <USB_GetMode>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <USB_SetCurrentMode+0x84>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b31      	cmp	r3, #49	; 0x31
 8008886:	d9f0      	bls.n	800886a <USB_SetCurrentMode+0x60>
 8008888:	e001      	b.n	800888e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e005      	b.n	800889a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b32      	cmp	r3, #50	; 0x32
 8008892:	d101      	bne.n	8008898 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a4:	b084      	sub	sp, #16
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	e009      	b.n	80088d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3340      	adds	r3, #64	; 0x40
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	2200      	movs	r2, #0
 80088d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	3301      	adds	r3, #1
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b0e      	cmp	r3, #14
 80088dc:	d9f2      	bls.n	80088c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11c      	bne.n	800891e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f2:	f043 0302 	orr.w	r3, r3, #2
 80088f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	e005      	b.n	800892a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008930:	461a      	mov	r2, r3
 8008932:	2300      	movs	r3, #0
 8008934:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893c:	4619      	mov	r1, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008944:	461a      	mov	r2, r3
 8008946:	680b      	ldr	r3, [r1, #0]
 8008948:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800894a:	2103      	movs	r1, #3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f959 	bl	8008c04 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008952:	2110      	movs	r1, #16
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f8f1 	bl	8008b3c <USB_FlushTxFifo>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f91d 	bl	8008ba4 <USB_FlushRxFifo>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897a:	461a      	mov	r2, r3
 800897c:	2300      	movs	r3, #0
 800897e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	461a      	mov	r2, r3
 8008988:	2300      	movs	r3, #0
 800898a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	461a      	mov	r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008998:	2300      	movs	r3, #0
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	e043      	b.n	8008a26 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089b4:	d118      	bne.n	80089e8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	461a      	mov	r2, r3
 80089ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	e013      	b.n	80089fa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089de:	461a      	mov	r2, r3
 80089e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	e008      	b.n	80089fa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f4:	461a      	mov	r2, r3
 80089f6:	2300      	movs	r3, #0
 80089f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a06:	461a      	mov	r2, r3
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	3301      	adds	r3, #1
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d3b7      	bcc.n	800899e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	e043      	b.n	8008abc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a4a:	d118      	bne.n	8008a7e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	e013      	b.n	8008a90 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	461a      	mov	r2, r3
 8008a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	e008      	b.n	8008a90 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3b7      	bcc.n	8008a34 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	f043 0210 	orr.w	r2, r3, #16
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	4b10      	ldr	r3, [pc, #64]	; (8008b38 <USB_DevInit+0x294>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	f043 0208 	orr.w	r2, r3, #8
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d107      	bne.n	8008b26 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b1e:	f043 0304 	orr.w	r3, r3, #4
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b32:	b004      	add	sp, #16
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	803c3800 	.word	0x803c3800

08008b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <USB_FlushTxFifo+0x64>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d901      	bls.n	8008b5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e01b      	b.n	8008b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	daf2      	bge.n	8008b4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	019b      	lsls	r3, r3, #6
 8008b6c:	f043 0220 	orr.w	r2, r3, #32
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <USB_FlushTxFifo+0x64>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e006      	b.n	8008b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d0f0      	beq.n	8008b74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	00030d40 	.word	0x00030d40

08008ba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a11      	ldr	r2, [pc, #68]	; (8008c00 <USB_FlushRxFifo+0x5c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d901      	bls.n	8008bc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e018      	b.n	8008bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	daf2      	bge.n	8008bb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2210      	movs	r2, #16
 8008bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4a08      	ldr	r2, [pc, #32]	; (8008c00 <USB_FlushRxFifo+0x5c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d901      	bls.n	8008be6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e006      	b.n	8008bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d0f0      	beq.n	8008bd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	00030d40 	.word	0x00030d40

08008c04 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	68f9      	ldr	r1, [r7, #12]
 8008c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c24:	4313      	orrs	r3, r2
 8008c26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c50:	f023 0303 	bic.w	r3, r3, #3
 8008c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c64:	f043 0302 	orr.w	r3, r3, #2
 8008c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	f003 0301 	and.w	r3, r3, #1
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4a13      	ldr	r2, [pc, #76]	; (8008cf8 <USB_CoreReset+0x64>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d901      	bls.n	8008cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e01b      	b.n	8008cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	daf2      	bge.n	8008ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f043 0201 	orr.w	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <USB_CoreReset+0x64>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d901      	bls.n	8008cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e006      	b.n	8008cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d0f0      	beq.n	8008cca <USB_CoreReset+0x36>

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	00030d40 	.word	0x00030d40

08008cfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008d00:	4904      	ldr	r1, [pc, #16]	; (8008d14 <MX_FATFS_Init+0x18>)
 8008d02:	4805      	ldr	r0, [pc, #20]	; (8008d18 <MX_FATFS_Init+0x1c>)
 8008d04:	f000 f9e4 	bl	80090d0 <FATFS_LinkDriver>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <MX_FATFS_Init+0x20>)
 8008d0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d10:	bf00      	nop
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000870 	.word	0x20000870
 8008d18:	080091a8 	.word	0x080091a8
 8008d1c:	2000086c 	.word	0x2000086c

08008d20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d2a:	f000 f879 	bl	8008e20 <BSP_SD_IsDetected>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d001      	beq.n	8008d38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008d34:	2302      	movs	r3, #2
 8008d36:	e012      	b.n	8008d5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008d38:	480b      	ldr	r0, [pc, #44]	; (8008d68 <BSP_SD_Init+0x48>)
 8008d3a:	f7fd f887 	bl	8005e4c <HAL_SD_Init>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008d48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d4c:	4806      	ldr	r0, [pc, #24]	; (8008d68 <BSP_SD_Init+0x48>)
 8008d4e:	f7fd fe87 	bl	8006a60 <HAL_SD_ConfigWideBusOperation>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000200 	.word	0x20000200

08008d6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	4806      	ldr	r0, [pc, #24]	; (8008da4 <BSP_SD_ReadBlocks+0x38>)
 8008d8a:	f7fd f935 	bl	8005ff8 <HAL_SD_ReadBlocks>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000200 	.word	0x20000200

08008da8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	4806      	ldr	r0, [pc, #24]	; (8008de0 <BSP_SD_WriteBlocks+0x38>)
 8008dc6:	f7fd faf5 	bl	80063b4 <HAL_SD_WriteBlocks>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000200 	.word	0x20000200

08008de4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <BSP_SD_GetCardState+0x1c>)
 8008dea:	f7fd fef5 	bl	8006bd8 <HAL_SD_GetCardState>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000200 	.word	0x20000200

08008e04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4803      	ldr	r0, [pc, #12]	; (8008e1c <BSP_SD_GetCardInfo+0x18>)
 8008e10:	f7fd fdfa 	bl	8006a08 <HAL_SD_GetCardInfo>
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000200 	.word	0x20000200

08008e20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e26:	2301      	movs	r3, #1
 8008e28:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008e2a:	f000 f80b 	bl	8008e44 <BSP_PlatformIsDetected>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008e34:	2300      	movs	r3, #0
 8008e36:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	b2db      	uxtb	r3, r3
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008e4e:	2180      	movs	r1, #128	; 0x80
 8008e50:	4806      	ldr	r0, [pc, #24]	; (8008e6c <BSP_PlatformIsDetected+0x28>)
 8008e52:	f7fa fbcf 	bl	80035f4 <HAL_GPIO_ReadPin>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008e60:	79fb      	ldrb	r3, [r7, #7]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	48000800 	.word	0x48000800

08008e70 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <SD_CheckStatus+0x38>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008e80:	f7ff ffb0 	bl	8008de4 <BSP_SD_GetCardState>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e8a:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <SD_CheckStatus+0x38>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <SD_CheckStatus+0x38>)
 8008e98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e9a:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <SD_CheckStatus+0x38>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b2db      	uxtb	r3, r3
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000009 	.word	0x20000009

08008eac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <SD_initialize+0x38>)
 8008eb8:	2201      	movs	r2, #1
 8008eba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008ebc:	f7ff ff30 	bl	8008d20 <BSP_SD_Init>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d107      	bne.n	8008ed6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ffd1 	bl	8008e70 <SD_CheckStatus>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <SD_initialize+0x38>)
 8008ed4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008ed6:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <SD_initialize+0x38>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	b2db      	uxtb	r3, r3
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000009 	.word	0x20000009

08008ee8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff ffbb 	bl	8008e70 <SD_CheckStatus>
 8008efa:	4603      	mov	r3, r0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7ff ff23 	bl	8008d6c <BSP_SD_ReadBlocks>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d107      	bne.n	8008f3c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f2c:	bf00      	nop
 8008f2e:	f7ff ff59 	bl	8008de4 <BSP_SD_GetCardState>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1fa      	bne.n	8008f2e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b086      	sub	sp, #24
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	68b8      	ldr	r0, [r7, #8]
 8008f64:	f7ff ff20 	bl	8008da8 <BSP_SD_WriteBlocks>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008f6e:	bf00      	nop
 8008f70:	f7ff ff38 	bl	8008de4 <BSP_SD_GetCardState>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1fa      	bne.n	8008f70 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08c      	sub	sp, #48	; 0x30
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	603a      	str	r2, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
 8008f94:	460b      	mov	r3, r1
 8008f96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f9e:	4b25      	ldr	r3, [pc, #148]	; (8009034 <SD_ioctl+0xac>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <SD_ioctl+0x28>
 8008fac:	2303      	movs	r3, #3
 8008fae:	e03c      	b.n	800902a <SD_ioctl+0xa2>

  switch (cmd)
 8008fb0:	79bb      	ldrb	r3, [r7, #6]
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d834      	bhi.n	8009020 <SD_ioctl+0x98>
 8008fb6:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <SD_ioctl+0x34>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fd5 	.word	0x08008fd5
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08009007 	.word	0x08009007
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fd2:	e028      	b.n	8009026 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fd4:	f107 030c 	add.w	r3, r7, #12
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff ff13 	bl	8008e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fea:	e01c      	b.n	8009026 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff ff07 	bl	8008e04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009004:	e00f      	b.n	8009026 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009006:	f107 030c 	add.w	r3, r7, #12
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fefa 	bl	8008e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	0a5a      	lsrs	r2, r3, #9
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800901e:	e002      	b.n	8009026 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009020:	2304      	movs	r3, #4
 8009022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800902a:	4618      	mov	r0, r3
 800902c:	3730      	adds	r7, #48	; 0x30
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000009 	.word	0x20000009

08009038 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800904e:	4b1f      	ldr	r3, [pc, #124]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d131      	bne.n	80090bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009058:	4b1c      	ldr	r3, [pc, #112]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 800905a:	7a5b      	ldrb	r3, [r3, #9]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009062:	2100      	movs	r1, #0
 8009064:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009068:	7a5b      	ldrb	r3, [r3, #9]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	4a17      	ldr	r2, [pc, #92]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009076:	4b15      	ldr	r3, [pc, #84]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009078:	7a5b      	ldrb	r3, [r3, #9]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009080:	4413      	add	r3, r2
 8009082:	79fa      	ldrb	r2, [r7, #7]
 8009084:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009088:	7a5b      	ldrb	r3, [r3, #9]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	b2d1      	uxtb	r1, r2
 8009090:	4a0e      	ldr	r2, [pc, #56]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009092:	7251      	strb	r1, [r2, #9]
 8009094:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009096:	7dbb      	ldrb	r3, [r7, #22]
 8009098:	3330      	adds	r3, #48	; 0x30
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	3301      	adds	r3, #1
 80090a4:	223a      	movs	r2, #58	; 0x3a
 80090a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	3302      	adds	r3, #2
 80090ac:	222f      	movs	r2, #47	; 0x2f
 80090ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3303      	adds	r3, #3
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	20000874 	.word	0x20000874

080090d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090da:	2200      	movs	r2, #0
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ffaa 	bl	8009038 <FATFS_LinkDriverEx>
 80090e4:	4603      	mov	r3, r0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <__libc_init_array>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	4d0d      	ldr	r5, [pc, #52]	; (8009128 <__libc_init_array+0x38>)
 80090f4:	4c0d      	ldr	r4, [pc, #52]	; (800912c <__libc_init_array+0x3c>)
 80090f6:	1b64      	subs	r4, r4, r5
 80090f8:	10a4      	asrs	r4, r4, #2
 80090fa:	2600      	movs	r6, #0
 80090fc:	42a6      	cmp	r6, r4
 80090fe:	d109      	bne.n	8009114 <__libc_init_array+0x24>
 8009100:	4d0b      	ldr	r5, [pc, #44]	; (8009130 <__libc_init_array+0x40>)
 8009102:	4c0c      	ldr	r4, [pc, #48]	; (8009134 <__libc_init_array+0x44>)
 8009104:	f000 f820 	bl	8009148 <_init>
 8009108:	1b64      	subs	r4, r4, r5
 800910a:	10a4      	asrs	r4, r4, #2
 800910c:	2600      	movs	r6, #0
 800910e:	42a6      	cmp	r6, r4
 8009110:	d105      	bne.n	800911e <__libc_init_array+0x2e>
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	f855 3b04 	ldr.w	r3, [r5], #4
 8009118:	4798      	blx	r3
 800911a:	3601      	adds	r6, #1
 800911c:	e7ee      	b.n	80090fc <__libc_init_array+0xc>
 800911e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009122:	4798      	blx	r3
 8009124:	3601      	adds	r6, #1
 8009126:	e7f2      	b.n	800910e <__libc_init_array+0x1e>
 8009128:	080091c4 	.word	0x080091c4
 800912c:	080091c4 	.word	0x080091c4
 8009130:	080091c4 	.word	0x080091c4
 8009134:	080091c8 	.word	0x080091c8

08009138 <memset>:
 8009138:	4402      	add	r2, r0
 800913a:	4603      	mov	r3, r0
 800913c:	4293      	cmp	r3, r2
 800913e:	d100      	bne.n	8009142 <memset+0xa>
 8009140:	4770      	bx	lr
 8009142:	f803 1b01 	strb.w	r1, [r3], #1
 8009146:	e7f9      	b.n	800913c <memset+0x4>

08009148 <_init>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr

08009154 <_fini>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr
